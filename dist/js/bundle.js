/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Controllers/CanvasController.js":
/*!*********************************************!*\
  !*** ./src/Controllers/CanvasController.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nclass CanvasController{\n    constructor(env, canvas) {\n        this.env = env;\n        this.canvas = canvas;\n        this.mouse_x;\n        this.mouse_y;\n        this.mouse_c;\n        this.mouse_r;\n        this.left_click = false;\n        this.middle_click = false;\n        this.right_click = false;\n        this.cur_cell = null;\n        this.cur_org = null;\n        this.highlight_org = true;\n        this.defineEvents();\n    }\n\n    setControlPanel(panel){\n        this.control_panel = panel;\n    }\n\n    defineEvents() {\n        this.canvas.addEventListener('mousemove', e => {\n            this.updateMouseLocation(e.offsetX, e.offsetY)\n            this.mouseMove();\n        });\n\n        this.canvas.addEventListener('mouseup', function(evt) {\n            evt.preventDefault();\n            this.updateMouseLocation(evt.offsetX, evt.offsetY)\n            this.mouseUp();\n            if (evt.button == 0) \n                this.left_click = false;\n            if (evt.button == 1) \n                this.middle_click = false;\n            if (evt.button == 2) \n                this.right_click = false;\n        }.bind(this));\n\n        this.canvas.addEventListener('mousedown', function(evt) {\n            evt.preventDefault();\n            this.updateMouseLocation(evt.offsetX, evt.offsetY)\n            if (evt.button == 0) \n                this.left_click = true;\n            if (evt.button == 1) \n                this.middle_click = true;\n            if (evt.button == 2) \n                this.right_click = true;\n            this.mouseDown();\n        }.bind(this));\n\n        this.canvas.addEventListener('contextmenu', function(evt) {\n            evt.preventDefault();\n        });\n\n        this.canvas.addEventListener('mouseleave', function(){\n            this.left_click   = false;\n            this.middle_click = false;\n            this.right_click  = false;\n            this.env.renderer.clearAllHighlights(true);\n        }.bind(this));\n\n        this.canvas.addEventListener('mouseenter', function(evt) {\n\n            this.left_click   = !!(evt.buttons & 1);\n            this.right_click  = !!(evt.buttons & 2);\n            this.middle_click = !!(evt.buttons & 4);\n\n            this.updateMouseLocation(evt.offsetX, evt.offsetY);\n            this.start_x = this.mouse_x;\n            this.start_y = this.mouse_y;\n\n\n        }.bind(this))\n\n    }\n\n    updateMouseLocation(offsetX, offsetY) {\n        var prev_cell = this.cur_cell;\n        var prev_org = this.cur_org;\n\n        this.mouse_x = offsetX;\n        this.mouse_y = offsetY;\n        var colRow = this.env.grid_map.xyToColRow(this.mouse_x, this.mouse_y);\n        this.mouse_c = colRow[0];\n        this.mouse_r = colRow[1];\n        this.cur_cell = this.env.grid_map.cellAt(this.mouse_c, this.mouse_r);\n        this.cur_org = this.cur_cell.owner;\n\n        if (this.cur_org != prev_org || this.cur_cell != prev_cell) {\n            this.env.renderer.clearAllHighlights(true);\n            if (this.cur_org != null && this.highlight_org) {\n                this.env.renderer.highlightOrganism(this.cur_org);\n            }\n            else if (this.cur_cell != null) {\n                this.env.renderer.highlightCell(this.cur_cell, true);\n            }\n        }\n    }\n\n    mouseMove() {\n        alert(\"mouse move must be overridden\");\n    }\n\n    mouseDown() {\n        alert(\"mouse down must be overridden\");\n    }\n\n    mouseUp(){\n        alert(\"mouse up must be overridden\")\n    }\n}\n\nmodule.exports = CanvasController;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Controllers/CanvasController.js?");

/***/ }),

/***/ "./src/Controllers/ControlModes.js":
/*!*****************************************!*\
  !*** ./src/Controllers/ControlModes.js ***!
  \*****************************************/
/***/ ((module) => {

eval("const Modes = {\n    None: 0,\n    FoodDrop: 1,\n    WallDrop: 2,\n    ClickKill: 3,\n    Select: 4,\n    Edit: 5,\n    Clone: 6,\n    Drag: 7,\n}\n\nmodule.exports = Modes;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Controllers/ControlModes.js?");

/***/ }),

/***/ "./src/Controllers/ControlPanel.js":
/*!*****************************************!*\
  !*** ./src/Controllers/ControlPanel.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Hyperparams = __webpack_require__(/*! ../Hyperparameters */ \"./src/Hyperparameters.js\");\nconst Modes = __webpack_require__(/*! ./ControlModes */ \"./src/Controllers/ControlModes.js\");\nconst StatsPanel = __webpack_require__(/*! ../Stats/StatsPanel */ \"./src/Stats/StatsPanel.js\");\nconst RandomOrganismGenerator = __webpack_require__(/*! ../Organism/RandomOrganismGenerator */ \"./src/Organism/RandomOrganismGenerator.js\")\nconst WorldConfig = __webpack_require__(/*! ../WorldConfig */ \"./src/WorldConfig.js\");\nconst CellStates = __webpack_require__(/*! ../Organism/Cell/CellStates */ \"./src/Organism/Cell/CellStates.js\");\n\nclass ControlPanel {\n    constructor(engine) {\n        this.engine = engine;\n        this.defineMinMaxControls();\n        this.defineHotkeys();\n        this.defineEngineSpeedControls();\n        this.defineTabNavigation();\n        this.defineHyperparameterControls();\n        this.defineWorldControls();\n        this.defineModeControls();\n        this.fps = engine.fps;\n        this.organism_record=0;\n        this.env_controller = this.engine.env.controller;\n        this.editor_controller = this.engine.organism_editor.controller;\n        this.env_controller.setControlPanel(this);\n        this.editor_controller.setControlPanel(this);\n        this.stats_panel = new StatsPanel(this.engine.env);\n        this.headless_opacity = 1;\n        this.opacity_change_rate = -0.8;\n        this.paused=false;\n        this.setHyperparamDefaults();\n    }\n\n    defineMinMaxControls(){\n        this.control_panel_active = true;\n        this.no_hud = false;\n        $('#minimize').click ( () => {\n            $('.control-panel').css('display', 'none');\n            $('.hot-controls').css('display', 'block');\n            this.control_panel_active = false;\n            this.stats_panel.stopAutoRender();\n        });\n        $('#maximize').click ( () => {\n            $('.control-panel').css('display', 'grid');\n            $('.hot-controls').css('display', 'none');\n            this.control_panel_active = true;\n            if (this.tab_id == 'stats') {\n                this.stats_panel.startAutoRender();\n            }\n        });\n    }\n\n    defineHotkeys() {\n        $('body').keydown( (e) => {\n            switch (e.key.toLowerCase()) {\n                // hot bar controls\n                case 'a':\n                    $('.reset-view')[0].click();\n                    break;\n                case 's':\n                    $('#drag-view').click();\n                    break;\n                case 'd':\n                    $('#wall-drop').click();\n                    break;\n                case 'f':\n                    $('#food-drop').click();\n                    break;\n                case 'g':\n                    $('#click-kill').click();\n                    break;\n                case 'h':\n                    $('.headless')[0].click();\n                    break;\n                case 'j':\n                    $('#skip-frames').click();\n                    break;\n                case 'k':\n                case ' ':\n                    e.preventDefault();\n                    $('.pause-button')[0].click();\n                    break;\n                // miscellaneous hotkeys\n                case 'q': // minimize/maximize control panel\n                    e.preventDefault();\n                    if (this.control_panel_active)\n                        $('#minimize').click();\n                    else\n                        $('#maximize').click();\n                    break;\n                case 'z':\n                    $('#select').click();\n                    break;\n                case 'x':\n                    $('#edit').click();\n                    break;\n                case 'c':\n                    $('#drop-org').click();\n                    break;\n                case 'v':\n                    $('#copy-dc-code').click();\n                    break;\n                case 'b': // toggle hud\n                    if (this.no_hud) {\n                        let control_panel_display = this.control_panel_active ? 'grid' : 'none';\n                        let hot_control_display = !this.control_panel_active ? 'block' : 'none';\n                        if (this.control_panel_active && this.tab_id == 'stats') {\n                            this.stats_panel.startAutoRender();\n                        };\n                        $('.control-panel').css('display', control_panel_display);\n                        $('.hot-controls').css('display', hot_control_display);\n                    }\n                    else {\n                        $('.control-panel').css('display', 'none');\n                        $('.hot-controls').css('display', 'none');\n                    }\n                    this.no_hud = !this.no_hud;\n                    break;\n                case 'n':\n                    $('#clear-walls').click();\n            }\n        });\n    }\n\n    defineEngineSpeedControls(){\n        this.slider = document.getElementById(\"slider\");\n        this.slider.oninput = function() {\n            const max_fps = 300000;\n            this.fps = this.slider.value;\n            if (this.fps>=max_fps) this.fps = 500000;\n            if (this.engine.running) {\n                this.changeEngineSpeed(this.fps);\n            }\n            let text = this.fps >= max_fps ? 'MAX' : this.fps;\n            $('#fps').text(\"Target FPS: \"+text);\n        }.bind(this);\n\n        $('.pause-button').click(function() {\n            // toggle pause\n            this.setPaused(this.engine.running);\n        }.bind(this));\n\n        $('.headless').click(function() {\n            $('.headless').find(\"i\").toggleClass(\"fa fa-eye\");\n            $('.headless').find(\"i\").toggleClass(\"fa fa-eye-slash\");\n            if (WorldConfig.headless){\n                $('#headless-notification').css('display', 'none');\n                this.engine.env.renderFull();\n            }\n            else {\n                $('#headless-notification').css('display', 'block');\n            }\n            //disable skip frames checkbox\n            $('#skip-frames').prop('disabled', !WorldConfig.headless);\n            $('#skip-frames-number').prop('disabled', !WorldConfig.headless);\n            $('.skip-frames-label').css('color', WorldConfig.headless ? 'black' : 'gray');\n            WorldConfig.headless = !WorldConfig.headless;\n        }.bind(this));\n\n        $('#skip-frames').click(function() {\n            WorldConfig.skip_frames = !WorldConfig.skip_frames;\n            $('#skip-frames').prop('checked', WorldConfig.skip_frames);\n        }.bind(this));\n\n        $('#skip-frames-number').change(function() {\n            this.engine.render_period = parseInt($('#skip-frames-number').val()) || 0;\n        }.bind(this));\n    }\n\n    defineTabNavigation() {\n        this.tab_id = 'about';\n        var self = this;\n        $('.tabnav-item').click(function() {\n            $('.tab').css('display', 'none');\n            var tab = '#'+this.id+'.tab';\n            $(tab).css('display', 'grid');\n            $('.tabnav-item').removeClass('open-tab')\n            $('#'+this.id+'.tabnav-item').addClass('open-tab');\n            self.engine.organism_editor.is_active = (this.id == 'editor');\n            self.stats_panel.stopAutoRender();\n            if (this.id === 'stats') {\n                self.stats_panel.startAutoRender();\n            }\n            else if (this.id === 'editor') {\n                self.editor_controller.refreshDetailsPanel();\n            }\n            self.tab_id = this.id;\n        });\n    }\n\n    defineWorldControls() {\n        $('#fill-window').change(function() {\n            if (this.checked)\n                $('.col-row-input').css('display' ,'none');\n            else\n                $('.col-row-input').css('display' ,'block');\n        });\n\n        $('#resize').click(function() {\n            var cell_size = $('#cell-size').val();\n            var fill_window = $('#fill-window').is(\":checked\");\n            if (fill_window) {\n                this.engine.env.resizeFillWindow(cell_size);\n            }\n            else {\n                var cols = $('#col-input').val();\n                var rows = $('#row-input').val();\n                this.engine.env.resizeGridColRow(cell_size, cols, rows);\n            }\n            this.engine.env.reset();\n            this.stats_panel.reset();\n            \n        }.bind(this));\n\n        $('#auto-reset').change(function() {\n            WorldConfig.auto_reset = this.checked;\n        });\n        $('#auto-pause').change(function() {\n            WorldConfig.auto_pause = this.checked;\n        });\n        $('#clear-walls-reset').change(function() {\n            WorldConfig.clear_walls_on_reset = this.checked;\n        });\n        $('#reset-with-editor-org').click( () => {\n            let env = this.engine.env;\n            if (!env.reset(true, false)) return;\n            let center = env.grid_map.getCenter();\n            let org = this.editor_controller.env.getCopyOfOrg();\n            this.env_controller.add_new_species = true;\n            this.env_controller.dropOrganism(org, center[0], center[1])\n        });\n    }\n\n    defineHyperparameterControls() {\n        $('#food-prod-prob').change(function() {\n            Hyperparams.foodProdProb = $('#food-prod-prob').val();\n        }.bind(this));\n        $('#lifespan-multiplier').change(function() {\n            Hyperparams.lifespanMultiplier = $('#lifespan-multiplier').val();\n        }.bind(this));\n\n        $('#rot-enabled').change(function() {\n            Hyperparams.rotationEnabled = this.checked;\n        });\n        $('#insta-kill').change(function() {\n            Hyperparams.instaKill = this.checked;\n        });\n        $('#look-range').change(function() {\n            Hyperparams.lookRange = $('#look-range').val();\n        });\n        $('#food-drop-rate').change(function() {\n            Hyperparams.foodDropProb = $('#food-drop-rate').val();\n        });\n\n        $('#evolved-mutation').change( function() {\n            if (this.checked) {\n                $('.global-mutation-in').css('display', 'none');\n                $('#avg-mut').css('display', 'block');\n            }\n            else {\n                $('.global-mutation-in').css('display', 'block');\n                $('#avg-mut').css('display', 'none');\n            }\n            Hyperparams.useGlobalMutability = !this.checked;\n        });\n        $('#global-mutation').change( function() {\n            Hyperparams.globalMutability = parseInt($('#global-mutation').val());\n        });\n        $('#movers-produce').change( function() {\n            Hyperparams.moversCanProduce = this.checked;\n        });\n        $('#food-blocks').change( function() {\n            Hyperparams.foodBlocksReproduction = this.checked;        \n        });\n        $('#reset-rules').click(() => {\n            this.setHyperparamDefaults();\n        });\n        $('#save-controls').click(() => {\n            let data = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(Hyperparams));\n            let downloadEl = document.getElementById('download-el');\n            downloadEl.setAttribute(\"href\", data);\n            downloadEl.setAttribute(\"download\", \"controls.json\");\n            downloadEl.click();\n        });\n        $('#load-controls').click(() => {\n            $('#upload-el').click();\n        });\n        $('#upload-el').change((e)=>{\n            let files = e.target.files;\n            if (!files.length) {return;};\n            let reader = new FileReader();\n            reader.onload = (e) => {\n                let result=JSON.parse(e.target.result);\n                Hyperparams.loadJsonObj(result);\n                this.updateHyperparamUIValues();\n                // have to clear the value so change() will be triggered if the same file is uploaded again\n                $('#upload-el')[0].value = '';\n            };\n            reader.readAsText(files[0]);\n        });\n    }\n\n    setHyperparamDefaults() {\n        Hyperparams.setDefaults();\n        this.updateHyperparamUIValues();\n    }\n\n    updateHyperparamUIValues(){\n        $('#food-prod-prob').val(Hyperparams.foodProdProb);\n        $('#lifespan-multiplier').val(Hyperparams.lifespanMultiplier);\n        $('#rot-enabled').prop('checked', Hyperparams.rotationEnabled);\n        $('#insta-kill').prop('checked', Hyperparams.instaKill);\n        $('#evolved-mutation').prop('checked', !Hyperparams.useGlobalMutability);\n        $('#movers-produce').prop('checked', Hyperparams.moversCanProduce);\n        $('#food-blocks').prop('checked', Hyperparams.foodBlocksReproduction);\n        $('#food-drop-rate').val(Hyperparams.foodDropProb);\n        $('#look-range').val(Hyperparams.lookRange);\n\n        if (!Hyperparams.useGlobalMutability) {\n            $('.global-mutation-in').css('display', 'none');\n            $('#avg-mut').css('display', 'block');\n        }\n        else {\n            $('.global-mutation-in').css('display', 'block');\n            $('#avg-mut').css('display', 'none');\n        }\n    }\n\n    defineModeControls() {\n        var self = this;\n        $('.edit-mode-btn').click( function() {\n            $('#cell-selections').css('display', 'none');\n            $('#organism-options').css('display', 'none');\n            self.editor_controller.setDetailsPanel();\n            switch(this.id) {\n                case \"food-drop\":\n                    self.setMode(Modes.FoodDrop);\n                    break;\n                case \"wall-drop\":\n                    self.setMode(Modes.WallDrop);\n                    break;\n                case \"click-kill\":\n                    self.setMode(Modes.ClickKill);\n                    break;\n                case \"select\":\n                    self.setMode(Modes.Select);\n                    break;\n                case \"edit\":\n                    self.setMode(Modes.Edit);\n                    break;\n                case \"drop-org\":\n                    self.setMode(Modes.Clone);\n                    break;\n                case \"drag-view\":\n                    self.setMode(Modes.Drag);\n            }\n            $('.edit-mode-btn').removeClass('selected');\n            $('.'+this.id).addClass('selected');\n        });\n        $('.reset-view').click( function(){\n            this.env_controller.resetView();\n        }.bind(this));\n\n        $('#copy-dc-code').click( function(){\n            let org = this.engine.organism_editor.organism;\n            let anatomy = org.anatomy;\n            let cells = anatomy.cells;\n            let code = \"\";\n            let startx = 0;\n            let starty = 0;\n            let endx = 0;\n            let endy = 0;\n\n            for (var cell of cells) {\n                if(cell.loc_col < startx) {\n                    startx = cell.loc_col;\n                }\n                if(cell.loc_col > endx) {\n                    endx = cell.loc_col;\n                }\n                if(cell.loc_row < starty) {\n                    starty = cell.loc_row;\n                }\n                if(cell.loc_row > endy) {\n                    endy = cell.loc_row;\n                }\n            }\n            //iterate from top left to bottom right\n            for(var i = starty; i <= endy; i++) {\n                for(var j = startx; j <= endx; j++) {\n                    let cell = cells.find(c => c.loc_row == i && c.loc_col == j);\n                    if(cell == undefined) {\n                        code += CellStates.empty.dc_code;\n                    }else {\n                        if(cell.state.dc_code == ':eye:'){\n                            switch (cell.direction) {\n                                case 0://up\n                                    code += ':eyeu:';\n                                    break;\n                                case 1://right\n                                    code += ':eyer:';\n                                    break;\n                                case 2://down\n                                    code += ':eyed:';\n                                    break;\n                                case 3://left\n                                    code += ':eyel:';\n                                    break;\n                                default:\n                                    code += ':eye:';\n                                    break;\n                            }\n                        }else{\n                            code += cell.state.dc_code;\n                        }\n                    }\n                }\n\n                code += '\\n';\n            }\n\n            code += \"Cell Count: \" + cells.length + \"\\n\";\n            if(anatomy.is_mover) code += \"Move Range: \" + org.move_range + \"\\n\";\n            code += \"Mutation Rate: \" + org.mutability + \" (Add: \"+org.addProb.toFixed(2)+\", Change: \"+org.changeProb.toFixed(2)+\", Remove: \"+org.removeProb.toFixed(2)+\")\\n\";\n            if(anatomy.is_mover && anatomy.has_eyes){\n                let brain = org.brain;\n\n                let chase_types = [];\n                let retreat_types = [];\n                for(let cell_name in brain.decisions) {\n                    let decision = brain.decisions[cell_name];\n                    if (decision == 1) {\n                        retreat_types.push(cell_name)\n                    }\n                    else if (decision == 2) {\n                        chase_types.push(cell_name);\n                    }\n                }\n\n                if(chase_types.length > 0) {\n                    code += \"Move Towards: \" + chase_types.join(', ') + \"\\n\";\n                }\n                if(retreat_types.length > 0) {\n                    code += \"Move Away From: \" + retreat_types.join(', ') + \"\\n\";\n                }\n            }\n\n            console.log(code);\n            navigator.clipboard.writeText(code);\n        }.bind(this));\n\n        var env = this.engine.env;\n        $('#reset-env').click( function() {\n            env.reset();\n            this.stats_panel.reset();\n        }.bind(this));\n        $('#clear-env').click( () => {\n            env.reset(true, false);\n            this.stats_panel.reset();\n        });\n        $('#random-walls').click( function() {\n            this.env_controller.randomizeWalls();\n        }.bind(this));\n        $('#clear-walls').click( function() {\n            this.engine.env.clearWalls();\n        }.bind(this));\n        $('#clear-editor').click( function() {\n            this.engine.organism_editor.clear();\n            this.editor_controller.setEditorPanel();\n        }.bind(this));\n        $('#generate-random').click( function() {\n            this.engine.organism_editor.createRandom();\n            this.editor_controller.refreshDetailsPanel();\n        }.bind(this));\n        $('.reset-random').click( function() {\n            this.engine.organism_editor.resetWithRandomOrgs(this.engine.env);\n        }.bind(this));\n\n        $('.cell-legend-type-living').click(function() {\n            if(Hyperparams.cost[this.id] != null) {\n                let val = parseFloat(prompt('Enter the reproduce cost of ' + this.id + ' cell:', Hyperparams.cost[this.id].toFixed(2)));\n                \n                Hyperparams.cost[this.id] = isNaN(val) ? Hyperparams.cost[this.id] : Math.max(val, 0.001);\n            }\n        });\n\n        window.onbeforeunload = function (e) {\n            e = e || window.event;\n            let return_str = 'this will cause a confirmation on page close'\n            if (e) {\n                e.returnValue = return_str;\n            }\n            return return_str;\n        };\n    }\n\n    setPaused(paused) {\n\n        if (paused) {\n\n            $('.pause-button').find(\"i\").removeClass(\"fa-pause\");\n            $('.pause-button').find(\"i\").addClass(\"fa-play\");\n            if (this.engine.running) \n                this.engine.stop();\n        }\n        else if (!paused) {\n            \n            $('.pause-button').find(\"i\").addClass(\"fa-pause\");\n            $('.pause-button').find(\"i\").removeClass(\"fa-play\");\n            if (!this.engine.running)\n                this.engine.start(this.fps);\n        }\n    }\n\n    setMode(mode) {\n        this.env_controller.mode = mode;\n        this.editor_controller.mode = mode;\n\n        if (mode == Modes.Edit) {\n            this.editor_controller.setEditorPanel();\n        }\n\n        if (mode == Modes.Clone) {\n            this.env_controller.org_to_clone = this.engine.organism_editor.getCopyOfOrg();\n            this.env_controller.add_new_species = this.editor_controller.new_species;\n            this.editor_controller.new_species = false;\n            // console.log(this.env_controller.add_new_species)\n        }\n    }\n\n    setEditorOrganism(org) {\n        this.engine.organism_editor.setOrganismToCopyOf(org);\n        this.editor_controller.clearDetailsPanel();\n        this.editor_controller.setDetailsPanel();\n    }\n\n    changeEngineSpeed(change_val) {\n        this.engine.restart(change_val)\n        this.fps = this.engine.fps;\n    }\n\n    updateHeadlessIcon(delta_time) {\n        if (!this.engine.running)\n            return;\n        const min_opacity = 0.4;\n        var op = this.headless_opacity + (this.opacity_change_rate*delta_time/1000);\n        if (op <= min_opacity){\n            op=min_opacity;\n            this.opacity_change_rate = -this.opacity_change_rate;\n        }\n        else if (op >= 1){\n            op=1;\n            this.opacity_change_rate = -this.opacity_change_rate;\n        }\n        this.headless_opacity = op;\n        $('#headless-notification').css('opacity',(op*100)+'%');\n    }\n\n    update(delta_time) {\n        if(WorldConfig.skip_frames && !WorldConfig.headless) {\n            $('#fps-actual').text(\"Actual FPS: \" + Math.floor(this.engine.skipped_fps) + \" (\" + Math.floor(this.engine.actual_fps) + \")\");\n        }else{\n            $('#fps-actual').text(\"Actual FPS: \" + Math.floor(this.engine.actual_fps));\n        }\n        $('#reset-count').text(\"Auto reset count: \" + this.engine.env.reset_count);\n        this.stats_panel.updateDetails();\n        if (WorldConfig.headless)\n            this.updateHeadlessIcon(delta_time);\n\n    }\n\n}\n\n\nmodule.exports = ControlPanel;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Controllers/ControlPanel.js?");

/***/ }),

/***/ "./src/Controllers/EditorController.js":
/*!*********************************************!*\
  !*** ./src/Controllers/EditorController.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CanvasController = __webpack_require__(/*! ./CanvasController */ \"./src/Controllers/CanvasController.js\");\nconst Modes = __webpack_require__(/*! ./ControlModes */ \"./src/Controllers/ControlModes.js\");\nconst CellStates = __webpack_require__(/*! ../Organism/Cell/CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst Directions = __webpack_require__(/*! ../Organism/Directions */ \"./src/Organism/Directions.js\");\nconst Hyperparams = __webpack_require__(/*! ../Hyperparameters */ \"./src/Hyperparameters.js\");\n\nclass EditorController extends CanvasController{\n    constructor(env, canvas) {\n        super(env, canvas);\n        this.mode = Modes.None;\n        this.edit_cell_type = null;\n        this.highlight_org = false;\n        this.new_species = false;\n        this.defineCellTypeSelection();\n        this.defineEditorDetails();\n    }\n\n    mouseMove() {\n        if (this.right_click || this.left_click)\n            this.editOrganism();\n    }\n\n    mouseDown() {\n        this.editOrganism();\n    }\n\n    mouseUp(){}\n\n    getCurLocalCell(){\n        return this.env.organism.anatomy.getLocalCell(this.mouse_c-this.env.organism.c, this.mouse_r-this.env.organism.r);\n    }\n\n    editOrganism() {\n        if (this.edit_cell_type == null || this.mode != Modes.Edit)\n            return;\n        if (this.left_click){\n            if(this.edit_cell_type == CellStates.eye && this.cur_cell.state == CellStates.eye) {\n                var loc_cell = this.getCurLocalCell();\n                loc_cell.direction = Directions.rotateRight(loc_cell.direction);\n                this.env.renderFull();\n            }\n            else\n                this.env.addCellToOrg(this.mouse_c, this.mouse_r, this.edit_cell_type);\n        }\n        else if (this.right_click)\n            this.env.removeCellFromOrg(this.mouse_c, this.mouse_r);\n\n        this.new_species = true;\n        this.setBrainPanelVisibility();\n        this.setMoveRangeVisibility();\n        this.updateDetails();\n    }\n\n    updateDetails() {\n        $('.cell-count').text(\"Cell count: \"+this.env.organism.anatomy.cells.length);\n    }\n\n    defineCellTypeSelection() {\n        var self = this;\n        $('.cell-type').click( function() {\n            switch(this.id){\n                case \"mouth\":\n                    self.edit_cell_type = CellStates.mouth;\n                    break;\n                case \"producer\":\n                    self.edit_cell_type = CellStates.producer;\n                    break;\n                case \"mover\":\n                    self.edit_cell_type = CellStates.mover;\n                    break;\n                case \"killer\":\n                    self.edit_cell_type = CellStates.killer;\n                    break;\n                case \"armor\":\n                    self.edit_cell_type = CellStates.armor;\n                    break;\n                case \"eye\":\n                    self.edit_cell_type = CellStates.eye;\n                    break;\n                case \"fat\":\n                    self.edit_cell_type = CellStates.fat;\n                    break;\n            }\n            $(\".cell-type\" ).css( \"border-color\", \"black\" );\n            var selected = '#'+this.id+'.cell-type';\n            $(selected).css(\"border-color\", \"yellow\");\n        });\n    }\n\n    defineEditorDetails() {\n        this.details_html = $('#organism-details');\n        this.edit_details_html = $('#edit-organism-details');\n\n        this.decision_names = [\"ignore\", \"move away\", \"move towards\"];\n\n        $('#move-range-edit').change ( function() {\n            this.env.organism.move_range = parseInt($('#move-range-edit').val());\n        }.bind(this));\n\t\t\n        $('#mutation-rate-edit').change ( function() {\n            this.env.organism.mutability = parseInt($('#mutation-rate-edit').val());\n        }.bind(this));\n\n        $('#mutation-add-edit').change ( function() {\n            this.env.organism.addProb = parseFloat($('#mutation-add-edit').val());\n        }.bind(this));\n\n        $('#mutation-change-edit').change ( function() {\n            this.env.organism.changeProb = parseFloat($('#mutation-change-edit').val());\n        }.bind(this));\n\n        $('#mutation-remove-edit').change ( function() {\n            this.env.organism.removeProb = parseFloat($('#mutation-remove-edit').val());\n        }.bind(this));\n\n        $('#observation-type-edit').change ( function() {\n            this.setBrainEditorValues($('#observation-type-edit').val());\n            this.setBrainDetails();\n        }.bind(this));\n        $('#reaction-edit').change ( function() {\n            var obs = $('#observation-type-edit').val();\n            var decision = parseInt($('#reaction-edit').val());\n            this.env.organism.brain.decisions[obs] = decision;\n            this.setBrainDetails();\n        }.bind(this));\n    }\n\n    clearDetailsPanel() {\n        $('#organism-details').css('display', 'none');\n        $('#edit-organism-details').css('display', 'none');\n        $('#randomize-organism-details').css('display', 'none');\n    }\n\n    refreshDetailsPanel() {\n        if (this.mode === Modes.Edit)\n            this.setEditorPanel();\n        else\n            this.setDetailsPanel();\n    }\n\n    setDetailsPanel() {\n        this.clearDetailsPanel();\n        var org = this.env.organism;\n        \n        $('.cell-count').text(\"Cell count: \"+org.anatomy.cells.length);\n        $('#move-range').text(\"Move Range: \"+org.move_range);\n        $('#mutation-rate').text(\"Mutation Rate: \"+org.mutability);\n        $('#mutation-probs').text(\" (Add: \"+org.addProb.toFixed(2)+\", Change: \"+org.changeProb.toFixed(2)+\", Remove: \"+org.removeProb.toFixed(2)+\")\");\n       \n\t\tif (Hyperparams.useGlobalMutability) {\n            $('#mutation-rate').css('display', 'none');\n        }\n        else {\n            $('#mutation-rate').css('display', 'inline');\n        }\n\n        this.setMoveRangeVisibility();\n\n        if (this.setBrainPanelVisibility()) {\n            this.setBrainDetails();\n\n        }\n        $('#organism-details').css('display', 'block');\n    }\n\n    setEditorPanel() {\n        this.clearDetailsPanel();\n        var org = this.env.organism;\n\n        $('.cell-count').text(\"Cell count: \"+org.anatomy.cells.length);\n        if (this.setMoveRangeVisibility()){\n            $('#move-range-edit').val(org.move_range);\n        }\n\n\t\t$('#mutation-rate-edit').val(org.mutability);\n        $('#mutation-add-edit').val(org.addProb);\n        $('#mutation-change-edit').val(org.changeProb);\n        $('#mutation-remove-edit').val(org.removeProb);\n\n        if (Hyperparams.useGlobalMutability) {\n\t\t\t$('#mutation-rate-cont').css('display', 'none');\n        }\n        else {\n            $('#mutation-rate-cont').css('display', 'block');\n        }\n        \n        if (this.setBrainPanelVisibility()){\n            this.setBrainEditorValues($('#observation-type-edit').val());\n        }\n\n        $('#cell-selections').css('display', 'grid');\n        $('#edit-organism-details').css('display', 'block');\n    }\n\n    setBrainPanelVisibility() {\n        var org = this.env.organism;\n        if (org.anatomy.has_eyes && org.anatomy.is_mover) {\n            $('.brain-details').css('display', 'block');\n            return true;\n        }\n        $('.brain-details').css('display', 'none');\n        return false;\n    }\n\n    setBrainDetails() {\n        var chase_types = [];\n        var retreat_types = [];\n        for(var cell_name in this.env.organism.brain.decisions) {\n            var decision = this.env.organism.brain.decisions[cell_name];\n            if (decision == 1) {\n                retreat_types.push(cell_name)\n            }\n            else if (decision == 2) {\n                chase_types.push(cell_name);\n            }\n        }\n        $('.chase-types').text(\"Move Towards: \" + chase_types);\n        $('.retreat-types').text(\"Move Away From: \" + retreat_types);\n    }\n\n    setMoveRangeVisibility() {\n        var org = this.env.organism;\n        if (org.anatomy.is_mover) {\n            $('#move-range-cont').css('display', 'block');\n            $('#move-range').css('display', 'block');\n            return true;\n        }\n        $('#move-range-cont').css('display', 'none');\n        $('#move-range').css('display', 'none');\n        return false;\n    }\n\n    setBrainEditorValues(name) {\n        $('#observation-type-edit').val(name);\n        var reaction = this.env.organism.brain.decisions[name];\n        $('#reaction-edit').val(reaction);\n    }\n\n    setRandomizePanel() {\n        this.clearDetailsPanel();\n        $('#randomize-organism-details').css('display', 'block');\n    }\n}\n\nmodule.exports = EditorController;\n\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Controllers/EditorController.js?");

/***/ }),

/***/ "./src/Controllers/EnvironmentController.js":
/*!**************************************************!*\
  !*** ./src/Controllers/EnvironmentController.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CanvasController = __webpack_require__(/*! ./CanvasController */ \"./src/Controllers/CanvasController.js\");\nconst Organism = __webpack_require__(/*! ../Organism/Organism */ \"./src/Organism/Organism.js\");\nconst Modes = __webpack_require__(/*! ./ControlModes */ \"./src/Controllers/ControlModes.js\");\nconst CellStates = __webpack_require__(/*! ../Organism/Cell/CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst Neighbors = __webpack_require__(/*! ../Grid/Neighbors */ \"./src/Grid/Neighbors.js\");\nconst FossilRecord = __webpack_require__(/*! ../Stats/FossilRecord */ \"./src/Stats/FossilRecord.js\");\nconst WorldConfig = __webpack_require__(/*! ../WorldConfig */ \"./src/WorldConfig.js\");\nconst Perlin = __webpack_require__(/*! ../Utils/Perlin */ \"./src/Utils/Perlin.js\");\n\nclass EnvironmentController extends CanvasController{\n    constructor(env, canvas) {\n        super(env, canvas);\n        this.mode = Modes.FoodDrop;\n        this.org_to_clone = null;\n        this.add_new_species = false;\n        this.defineZoomControls();\n        this.scale = 1;\n    }\n\n    defineZoomControls() {\n          var scale = 1;\n          var zoom_speed = 0.5;\n          const el = document.querySelector('#env-canvas');\n          el.onwheel = function zoom(event) {\n            event.preventDefault();\n\n            var sign = -Math.sign(event.deltaY);\n\n            // Restrict scale\n            scale = Math.max(0.5, this.scale+(sign*zoom_speed));\n\n            var cur_top = parseInt($('#env-canvas').css('top'));\n            var cur_left = parseInt($('#env-canvas').css('left'));\n\n            var diff_x = (this.canvas.width/2  - this.mouse_x) * (scale - this.scale);\n            var diff_y = (this.canvas.height/2 - this.mouse_y) * (scale - this.scale);\n\n            $('#env-canvas').css('top', (cur_top+diff_y)+'px');\n            $('#env-canvas').css('left', (cur_left+diff_x)+'px');\n          \n            // Apply scale transform\n            el.style.transform = `scale(${scale})`;\n            this.scale = scale;\n\n          }.bind(this);\n    }\n\n    resetView() {\n        $('#env-canvas').css('transform', 'scale(1)');\n        $('#env-canvas').css('top', '0px');\n        $('#env-canvas').css('left', '0px');\n        this.scale = 1;\n    }\n\n    /*\n    Iterate over grid from 0,0 to env.num_cols,env.num_rows and create random walls using perlin noise to create a more organic shape.\n    */\n    randomizeWalls(thickness=1) {\n        this.env.clearWalls();\n        const noise_threshold = -0.017;\n        let avg_noise = 0;\n        let resolution = 20;\n        Perlin.seed();\n\n        for (let r = 0; r < this.env.num_rows; r++) {\n            for (let c = 0; c < this.env.num_cols; c++) {\n                let xval = c/this.env.num_cols*(resolution/this.env.renderer.cell_size*(this.env.num_cols/this.env.num_rows));\n                let yval = r/this.env.num_rows*(resolution/this.env.renderer.cell_size*(this.env.num_rows/this.env.num_cols));\n                let noise = Perlin.get(xval, yval);\n                avg_noise += noise/(this.env.num_rows*this.env.num_cols);\n                if (noise > noise_threshold && noise < noise_threshold + thickness/resolution) {\n                    let cell = this.env.grid_map.cellAt(c, r);\n                    if (cell != null) {\n                        if(cell.owner != null) cell.owner.die();\n                        this.env.changeCell(c, r, CellStates.wall, null);\n                    }\n                }\n            }\n        }\n    }\n\n    updateMouseLocation(offsetX, offsetY){\n        super.updateMouseLocation(offsetX, offsetY);\n    }\n\n    mouseMove() {\n        this.performModeAction();\n    }\n\n    mouseDown() {\n        this.start_x = this.mouse_x;\n        this.start_y = this.mouse_y;\n        this.performModeAction();\n    }\n\n    mouseUp() {\n\n    }\n\n    performModeAction() {\n        if (WorldConfig.headless && this.mode != Modes.Drag)\n            return;\n        var mode = this.mode;\n        var right_click = this.right_click;\n        var left_click = this.left_click;\n        if (mode != Modes.None && (right_click || left_click)) {\n            var cell = this.cur_cell;\n            if (cell == null){\n                return;\n            }\n            switch(mode) {\n                case Modes.FoodDrop:\n                    if (left_click){\n                        this.dropCellType(cell.col, cell.row, CellStates.food, false);\n                    }\n                    else if (right_click){\n                        this.dropCellType(cell.col, cell.row, CellStates.empty, false);\n                    }\n                    break;\n                case Modes.WallDrop:\n                        if (left_click){\n                            this.dropCellType(cell.col, cell.row, CellStates.wall, true);\n\n                        }\n                        else if (right_click){\n                            this.dropCellType(cell.col, cell.row, CellStates.empty, false);\n                        }\n                        break;\n                case Modes.ClickKill:\n                    this.killNearOrganisms();\n                    break;\n\n                case Modes.Select:\n                    if (this.cur_org == null) {\n                        this.cur_org = this.findNearOrganism();\n                    }\n                    if (this.cur_org != null){\n                        this.control_panel.setEditorOrganism(this.cur_org);\n                    }\n                    break;\n\n                case Modes.Clone:\n                    if (this.org_to_clone != null){\n                        this.dropOrganism(this.org_to_clone, this.mouse_c, this.mouse_r);\n                    }\n                    break;\n                case Modes.Drag:\n                    var cur_top = parseInt($('#env-canvas').css('top'), 10);\n                    var cur_left = parseInt($('#env-canvas').css('left'), 10);\n                    var new_top = cur_top + ((this.mouse_y - this.start_y)*this.scale);\n                    var new_left = cur_left + ((this.mouse_x - this.start_x)*this.scale);\n                    $('#env-canvas').css('top', new_top+'px');\n                    $('#env-canvas').css('left', new_left+'px');\n                    break;\n            }\n        }\n        else if (this.middle_click) {\n            //drag on middle click\n            var cur_top = parseInt($('#env-canvas').css('top'), 10);\n            var cur_left = parseInt($('#env-canvas').css('left'), 10);\n            var new_top = cur_top + ((this.mouse_y - this.start_y)*this.scale);\n            var new_left = cur_left + ((this.mouse_x - this.start_x)*this.scale);\n            $('#env-canvas').css('top', new_top+'px');\n            $('#env-canvas').css('left', new_left+'px');\n        }\n    }\n\n    dropOrganism(organism, col, row) {\n\n        // close the organism and drop it in the world\n        var new_org = new Organism(col, row, this.env, organism);\n\n        if (new_org.isClear(col, row)) {\n            if (this.add_new_species){\n                FossilRecord.addSpeciesObj(new_org.species);\n                new_org.species.start_tick = this.env.total_ticks;\n                this.add_new_species = false;\n                new_org.species.population = 0;\n            }\n            else if (this.org_to_clone.species.extinct){\n                FossilRecord.resurrect(this.org_to_clone.species);\n            }\n\n            this.env.addOrganism(new_org);\n            new_org.species.addPop();\n            return true;\n        }\n        return false;\n    }\n\n    dropCellType(col, row, state, killBlocking=false) {\n        for (var loc of Neighbors.allSelf){\n            var c=col + loc[0];\n            var r=row + loc[1];\n            var cell = this.env.grid_map.cellAt(c, r);\n            if (cell == null)\n                continue;\n            if (killBlocking && cell.owner != null){\n                cell.owner.die();\n            }\n            else if (cell.owner != null) {\n                continue;\n            }\n            this.env.changeCell(c, r, state, null);\n        }\n    }\n\n    findNearOrganism() {\n        for (var loc of Neighbors.all){\n            var c = this.cur_cell.col + loc[0];\n            var r = this.cur_cell.row + loc[1];\n            var cell = this.env.grid_map.cellAt(c, r);\n            if (cell != null && cell.owner != null)\n                return cell.owner;\n        }\n        return null;\n    }\n\n    killNearOrganisms() {\n        for (var loc of Neighbors.allSelf){\n            var c = this.cur_cell.col + loc[0];\n            var r = this.cur_cell.row + loc[1];\n            var cell = this.env.grid_map.cellAt(c, r);\n            if (cell != null && cell.owner != null)\n                cell.owner.die();\n        }\n    }\n\n\n}\n\nmodule.exports = EnvironmentController;\n\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Controllers/EnvironmentController.js?");

/***/ }),

/***/ "./src/Engine.js":
/*!***********************!*\
  !*** ./src/Engine.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const WorldEnvironment = __webpack_require__(/*! ./Environments/WorldEnvironment */ \"./src/Environments/WorldEnvironment.js\");\nconst ControlPanel = __webpack_require__(/*! ./Controllers/ControlPanel */ \"./src/Controllers/ControlPanel.js\");\nconst OrganismEditor = __webpack_require__(/*! ./Environments/OrganismEditor */ \"./src/Environments/OrganismEditor.js\");\nconst ColorScheme = __webpack_require__(/*! ./Rendering/ColorScheme */ \"./src/Rendering/ColorScheme.js\");\nconst WorldConfig = __webpack_require__(/*! ./WorldConfig */ \"./src/WorldConfig.js\");\n\n// If the simulation speed is below this value, a new interval will be created to handle ui rendering\n// at a reasonable speed. If it is above, the simulation interval will be used to update the ui.\nconst min_render_speed = 60;\n\nclass Engine {\n    constructor(){\n        this.fps = 60;\n        this.env = new WorldEnvironment(5);\n        this.organism_editor = new OrganismEditor();\n        this.controlpanel = new ControlPanel(this);\n        this.colorscheme = new ColorScheme(this.env, this.organism_editor);\n        this.colorscheme.loadColorScheme();\n        this.env.OriginOfLife();\n        \n        this.sim_last_update = Date.now();\n        this.sim_delta_time = 0;\n\n        this.ui_last_update = Date.now();\n        this.ui_delta_time = 0;\n\n        this.actual_fps = 0;\n        this.render_period = 4;\n        this.skipped_fps = 0;\n        this.running = false;\n    }\n\n    start(fps=60) {\n        if (fps <= 0)\n            fps = 1;\n        this.fps = fps;\n        this.sim_loop = setInterval(()=>{\n            this.updateSimDeltaTime();\n            this.environmentUpdate();\n        }, 1000/fps);\n        this.running = true;\n        if (this.fps >= min_render_speed) {\n            if (this.ui_loop != null) {\n                clearInterval(this.ui_loop);\n                this.ui_loop = null;\n            }\n        }\n        else\n            this.setUiLoop();\n    }\n    \n    stop() {\n        clearInterval(this.sim_loop);\n        this.running = false;\n        this.setUiLoop();\n    }\n\n    restart(fps) {\n        clearInterval(this.sim_loop);\n        this.start(fps);\n    }\n\n    setUiLoop() {\n        if (!this.ui_loop) {\n            this.ui_loop = setInterval(()=> {\n                this.updateUIDeltaTime();\n                this.necessaryUpdate();\n            }, 1000/min_render_speed);\n        }\n    }\n\n    updateSimDeltaTime() {\n        this.sim_delta_time = Date.now() - this.sim_last_update;\n        this.sim_last_update = Date.now();\n        if (!this.ui_loop) // if the ui loop isn't running, use the sim delta time\n            this.ui_delta_time = this.sim_delta_time;\n    }\n\n    updateUIDeltaTime() {\n        this.ui_delta_time = Date.now() - this.ui_last_update;\n        this.ui_last_update = Date.now();\n    }\n\n    environmentUpdate() {\n        this.actual_fps = (1000/this.sim_delta_time);\n        \n        if(WorldConfig.skip_frames){\n            this.skipped_fps = this.actual_fps/(this.render_period+1);\n        }else{\n            this.skipped_fps = 0;\n        }\n\n        this.env.update(this.sim_delta_time);\n        if(this.ui_loop == null) {\n            this.necessaryUpdate();\n        }\n            \n    }\n\n    necessaryUpdate() {\n        this.env.render();\n        this.controlpanel.update(this.ui_delta_time);\n        this.organism_editor.update();\n    }\n\n}\n\nmodule.exports = Engine;\n\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Engine.js?");

/***/ }),

/***/ "./src/Environments/Environment.js":
/*!*****************************************!*\
  !*** ./src/Environments/Environment.js ***!
  \*****************************************/
/***/ ((module) => {

eval("\n//An evironment has a grid_map, controller, and renderer\nclass Environment{\n    constructor() {\n    }\n\n    update(){\n        alert(\"Environment.update() must be overriden\");\n    }\n\n    changeCell(c, r, state, owner) {\n        this.grid_map.setCellType(c, r, state);\n        this.grid_map.setCellOwner(c, r, owner);\n    }\n}\n\n\nmodule.exports = Environment;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Environments/Environment.js?");

/***/ }),

/***/ "./src/Environments/OrganismEditor.js":
/*!********************************************!*\
  !*** ./src/Environments/OrganismEditor.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Environment = __webpack_require__(/*! ./Environment */ \"./src/Environments/Environment.js\");\nconst Organism = __webpack_require__(/*! ../Organism/Organism */ \"./src/Organism/Organism.js\");\nconst GridMap = __webpack_require__(/*! ../Grid/GridMap */ \"./src/Grid/GridMap.js\");\nconst Renderer = __webpack_require__(/*! ../Rendering/Renderer */ \"./src/Rendering/Renderer.js\");\nconst CellStates = __webpack_require__(/*! ../Organism/Cell/CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst EditorController = __webpack_require__(/*! ../Controllers/EditorController */ \"./src/Controllers/EditorController.js\");\nconst Species = __webpack_require__(/*! ../Stats/Species */ \"./src/Stats/Species.js\");\nconst RandomOrganismGenerator = __webpack_require__(/*! ../Organism/RandomOrganismGenerator */ \"./src/Organism/RandomOrganismGenerator.js\")\n\nclass OrganismEditor extends Environment{\n    constructor() {\n        super();\n        this.is_active = true;\n        var cell_size = 13;\n        this.renderer = new Renderer('editor-canvas', 'editor-env', cell_size);\n        this.controller = new EditorController(this, this.renderer.canvas);\n        this.grid_map = new GridMap(15, 15, cell_size);\n        this.clear();\n    }\n\n    update() {\n        if (this.is_active){\n            this.renderer.renderHighlights();\n        }\n    }\n\n    changeCell(c, r, state, owner) {\n        super.changeCell(c, r, state, owner);\n        this.renderFull();\n    }\n\n    renderFull() {\n        this.renderer.renderFullGrid(this.grid_map.grid);\n    }\n\n    // absolute c r, not local\n    addCellToOrg(c, r, state) {\n        var center = this.grid_map.getCenter();\n        var loc_c = c - center[0];\n        var loc_r = r - center[1];\n        var prev_cell = this.organism.anatomy.getLocalCell(loc_c, loc_r)\n        if (prev_cell != null) {\n            var new_cell = this.organism.anatomy.replaceCell(state, prev_cell.loc_col, prev_cell.loc_row, false);\n            this.changeCell(c, r, state, new_cell);\n        }\n        else if (this.organism.anatomy.canAddCellAt(loc_c, loc_r)){\n            this.changeCell(c, r, state, this.organism.anatomy.addDefaultCell(state, loc_c, loc_r));\n        }\n        this.organism.species = new Species(this.organism.anatomy, null, 0);\n    }\n\n    removeCellFromOrg(c, r) {\n        var center = this.grid_map.getCenter();\n        var loc_c = c - center[0];\n        var loc_r = r - center[1];\n        if (loc_c == 0 && loc_r == 0){\n            alert(\"Cannot remove center cell\");\n            return;\n        }\n        var prev_cell = this.organism.anatomy.getLocalCell(loc_c, loc_r)\n        if (prev_cell != null) {\n            if (this.organism.anatomy.removeCell(loc_c, loc_r)) {\n                this.changeCell(c, r, CellStates.empty, null);\n                this.organism.species = new Species(this.organism.anatomy, null, 0);\n            }\n        }\n    }\n\n    setOrganismToCopyOf(orig_org) {\n        this.grid_map.fillGrid(CellStates.empty);\n        var center = this.grid_map.getCenter();\n        this.organism = new Organism(center[0], center[1], this, orig_org);\n        this.organism.updateGrid();\n        this.controller.updateDetails();\n        this.controller.new_species = false;\n    }\n    \n    getCopyOfOrg() {\n        var new_org = new Organism(0, 0, null, this.organism);\n        return new_org;\n    }\n\n    clear() {\n        this.grid_map.fillGrid(CellStates.empty);\n        var center = this.grid_map.getCenter();\n        this.organism = new Organism(center[0], center[1], this, null);\n        this.organism.anatomy.addDefaultCell(CellStates.mouth, 0, 0);\n        this.organism.updateGrid();\n        this.organism.species = new Species(this.organism.anatomy, null, 0);\n    }\n\n    createRandom() {\n        this.grid_map.fillGrid(CellStates.empty);\n\n        this.organism = RandomOrganismGenerator.generate(this);\n        this.organism.updateGrid();\n        this.organism.species = new Species(this.organism.anatomy, null, 0);\n    }\n\n    resetWithRandomOrgs(env) {\n        let reset_confirmed = env.reset(true, false);\n        if (!reset_confirmed) return;\n        let numOrganisms = parseInt($('#num-random-orgs').val());\n\n        let size = Math.ceil(8);\n\n        for (let i=0; i<numOrganisms; i++) {\n            let newOrganism = RandomOrganismGenerator.generate(this);\n            newOrganism.species = new Species(newOrganism.anatomy, null, 0);\n            var col = Math.floor(size + (Math.random() * (env.grid_map.cols-(size*2)) ) );\n            var row = Math.floor(size + (Math.random() * (env.grid_map.rows-(size*2)) ) );\n            env.controller.add_new_species = true;\n            env.controller.dropOrganism(newOrganism, col, row);\n        }\n    }\n}\n\nmodule.exports = OrganismEditor;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Environments/OrganismEditor.js?");

/***/ }),

/***/ "./src/Environments/WorldEnvironment.js":
/*!**********************************************!*\
  !*** ./src/Environments/WorldEnvironment.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Environment = __webpack_require__(/*! ./Environment */ \"./src/Environments/Environment.js\");\nconst Renderer = __webpack_require__(/*! ../Rendering/Renderer */ \"./src/Rendering/Renderer.js\");\nconst GridMap = __webpack_require__(/*! ../Grid/GridMap */ \"./src/Grid/GridMap.js\");\nconst Organism = __webpack_require__(/*! ../Organism/Organism */ \"./src/Organism/Organism.js\");\nconst CellStates = __webpack_require__(/*! ../Organism/Cell/CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst EnvironmentController = __webpack_require__(/*! ../Controllers/EnvironmentController */ \"./src/Controllers/EnvironmentController.js\");\nconst Hyperparams = __webpack_require__(/*! ../Hyperparameters.js */ \"./src/Hyperparameters.js\");\nconst FossilRecord = __webpack_require__(/*! ../Stats/FossilRecord */ \"./src/Stats/FossilRecord.js\");\nconst WorldConfig = __webpack_require__(/*! ../WorldConfig */ \"./src/WorldConfig.js\");\n\nclass WorldEnvironment extends Environment{\n    constructor(cell_size) {\n        super();\n        this.renderer = new Renderer('env-canvas', 'env', cell_size);\n        this.controller = new EnvironmentController(this, this.renderer.canvas);\n        this.num_rows = Math.ceil(this.renderer.height / cell_size);\n        this.num_cols = Math.ceil(this.renderer.width / cell_size);\n        this.grid_map = new GridMap(this.num_cols, this.num_rows, cell_size);\n        this.organisms = [];\n        this.walls = [];\n        this.total_mutability = 0;\n        this.total_add_mutability = 0;\n        this.total_change_mutability = 0;\n        this.total_remove_mutability = 0;\n        this.largest_cell_count = 0;\n        this.reset_count = 0;\n        this.total_ticks = 0;\n        this.data_update_rate = 100;\n        FossilRecord.setEnv(this);\n    }\n\n    update() {\n        var to_remove = [];\n        for (var i in this.organisms) {\n            var org = this.organisms[i];\n            if (!org.living || !org.update()) {\n                to_remove.push(i);\n            }\n        }\n        if (Hyperparams.foodDropProb > 0) {\n            this.generateFood();\n        }\n        this.removeOrganisms(to_remove);\n        this.total_ticks ++;\n        if (this.total_ticks % this.data_update_rate == 0) {\n            FossilRecord.updateData();\n        }\n    }\n\n    render() {\n        if (WorldConfig.headless) {\n            this.renderer.cells_to_render.clear();\n            return;\n        }\n\n        var render_period = WorldConfig.skip_frames ? this.controller.control_panel.engine.render_period : 0;\n\n        if(this.total_ticks % (render_period + 1) != 0) return;\n\n        this.renderer.renderCells();\n        this.renderer.renderHighlights();\n    }\n\n    renderFull() {\n        this.renderer.renderFullGrid(this.grid_map.grid);\n    }\n\n    removeOrganisms(org_indeces) {\n        let start_pop = this.organisms.length;\n        for (var i of org_indeces.reverse()){\n            this.total_mutability -= this.organisms[i].mutability;\n            this.total_add_mutability -= this.organisms[i].addProb;\n            this.total_change_mutability -= this.organisms[i].changeProb;\n            this.total_remove_mutability -= this.organisms[i].removeProb;\n            this.organisms.splice(i, 1);\n        }\n        if (this.organisms.length === 0 && start_pop > 0) {\n            if (WorldConfig.auto_pause)\n                $('.pause-button')[0].click();\n            else if(WorldConfig.auto_reset) {\n                this.reset_count++;\n                this.reset(false);\n            }\n        }\n    }\n\n    OriginOfLife() {\n        var center = this.grid_map.getCenter();\n        var org = new Organism(center[0], center[1], this);\n        org.anatomy.addDefaultCell(CellStates.mouth, 0, 0);\n        org.anatomy.addDefaultCell(CellStates.producer, 1, 1);\n        org.anatomy.addDefaultCell(CellStates.producer, -1, -1);\n        this.addOrganism(org);\n        FossilRecord.addSpecies(org, null);\n    }\n\n    addOrganism(organism) {\n        organism.updateGrid();\n        this.total_mutability += organism.mutability;\n        this.total_add_mutability += organism.addProb;\n        this.total_change_mutability += organism.changeProb;\n        this.total_remove_mutability += organism.removeProb;\n        this.organisms.push(organism);\n        if (organism.anatomy.cells.length > this.largest_cell_count) \n            this.largest_cell_count = organism.anatomy.cells.length;\n    }\n\n    averageMutability() {\n        if (this.organisms.length < 1)\n            return 0;\n        if (Hyperparams.useGlobalMutability) {\n            return Hyperparams.globalMutability;\n        }\n        return this.total_mutability / this.organisms.length;\n    }\n\n    avarageAddMutability() {\n        if (this.organisms.length < 1)\n            return 0;\n        return this.total_add_mutability / this.organisms.length;\n    }\n\n    avarageChangeMutability() {\n        if (this.organisms.length < 1)\n            return 0;\n        return this.total_change_mutability / this.organisms.length;\n    }\n    \n    avarageRemoveMutability() {\n        if (this.organisms.length < 1)\n            return 0;\n        return this.total_remove_mutability / this.organisms.length;\n    }\n\n    changeCell(c, r, state, owner) {\n        super.changeCell(c, r, state, owner);\n        this.renderer.addToRender(this.grid_map.cellAt(c, r));\n        if(state == CellStates.wall)\n            this.walls.push(this.grid_map.cellAt(c, r));\n    }\n\n    clearWalls() {\n        for(var wall of this.walls){\n            let wcell = this.grid_map.cellAt(wall.col, wall.row);\n            if (wcell && wcell.state == CellStates.wall)\n                this.changeCell(wall.col, wall.row, CellStates.empty, null);\n        }\n    }\n\n    clearOrganisms() {\n        for (var org of this.organisms)\n            org.die();\n        this.organisms = [];\n    }\n\n    generateFood() {\n        var num_food = Math.max(Math.floor(this.grid_map.cols*this.grid_map.rows*Hyperparams.foodDropProb/50000), 1)\n        var prob = Hyperparams.foodDropProb;\n        for (var i=0; i<num_food; i++) {\n            if (Math.random() <= prob){\n                var c=Math.floor(Math.random() * this.grid_map.cols);\n                var r=Math.floor(Math.random() * this.grid_map.rows);\n\n                if (this.grid_map.cellAt(c, r).state == CellStates.empty){\n                    this.changeCell(c, r, CellStates.food, null);\n                }\n            }\n        }\n    }\n\n    reset(confirm_reset=true, reset_life=true) {\n        if (confirm_reset && !confirm('The current environment will be lost. Proceed?'))\n            return false;\n\n        this.organisms = [];\n        this.grid_map.fillGrid(CellStates.empty, !WorldConfig.clear_walls_on_reset);\n        this.renderer.renderFullGrid(this.grid_map.grid);\n        this.total_mutability = 0;\n        this.total_add_mutability = 0;\n        this.total_change_mutability = 0;\n        this.total_remove_mutability = 0;\n        this.total_ticks = 0;\n        FossilRecord.clear_record();\n        if (reset_life)\n            this.OriginOfLife();\n        return true;\n    }\n\n    resizeGridColRow(cell_size, cols, rows) {\n        this.renderer.cell_size = cell_size;\n        this.renderer.fillShape(rows*cell_size, cols*cell_size);\n        this.grid_map.resize(cols, rows, cell_size);\n    }\n\n    resizeFillWindow(cell_size) {\n        this.renderer.cell_size = cell_size;\n        this.renderer.fillWindow('env');\n        this.num_cols = Math.ceil(this.renderer.width / cell_size);\n        this.num_rows = Math.ceil(this.renderer.height / cell_size);\n        this.grid_map.resize(this.num_cols, this.num_rows, cell_size);\n    }\n}\n\nmodule.exports = WorldEnvironment;\n\n\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Environments/WorldEnvironment.js?");

/***/ }),

/***/ "./src/Grid/GridMap.js":
/*!*****************************!*\
  !*** ./src/Grid/GridMap.js ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Cell = __webpack_require__(/*! ../Organism/Cell/GridCell */ \"./src/Organism/Cell/GridCell.js\");\nconst CellStates = __webpack_require__(/*! ../Organism/Cell/CellStates */ \"./src/Organism/Cell/CellStates.js\");\n\nclass GridMap {\n    constructor(cols, rows, cell_size) {\n        this.resize(cols, rows, cell_size);\n    }\n\n    resize(cols, rows, cell_size) {\n        this.grid = [];\n        this.cols = cols;\n        this.rows = rows;\n        this.cell_size = cell_size;\n        for(var c=0; c<cols; c++) {\n            var row = [];\n            for(var r=0; r<rows; r++) {\n                var cell = new Cell(CellStates.empty, c, r, c*cell_size, r*cell_size);\n                row.push(cell);\n            }            \n            this.grid.push(row);\n        }\n    }\n\n    fillGrid(state, ignore_walls=false) {\n        for (var col of this.grid) {\n            for (var cell of col) {\n                if (ignore_walls && cell.state===CellStates.wall) continue;\n                cell.setType(state);\n                cell.owner = null;\n                cell.cell_owner = null;\n            }\n        }\n    }\n\n    cellAt(col, row) {\n        if (!this.isValidLoc(col, row)) {\n            return null;\n        }\n        return this.grid[col][row];\n    }\n\n    setCellType(col, row, state) {\n        if (!this.isValidLoc(col, row)) {\n            return;\n        }\n        this.grid[col][row].setType(state);\n    }\n\n    setCellOwner(col, row, cell_owner) {\n        if (!this.isValidLoc(col, row)) {\n            return;\n        }\n        this.grid[col][row].cell_owner = cell_owner;\n        if (cell_owner != null)\n            this.grid[col][row].owner = cell_owner.org;\n        else \n            this.grid[col][row].owner = null;\n    }\n\n    isValidLoc(col, row){\n        return col<this.cols && row<this.rows && col>=0 && row>=0;\n    }\n\n    getCenter(){\n        return [Math.floor(this.cols/2), Math.floor(this.rows/2)]\n    }\n\n    xyToColRow(x, y) {\n        var c = Math.floor(x/this.cell_size);\n        var r = Math.floor(y/this.cell_size);\n        if (c >= this.cols)\n            c = this.cols-1;\n        else if (c < 0)\n            c = 0;\n        if (r >= this.rows)\n            r = this.rows-1;\n        else if (r < 0)\n            r = 0;\n        return [c, r];\n    }\n}\n\nmodule.exports = GridMap;\n\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Grid/GridMap.js?");

/***/ }),

/***/ "./src/Grid/Neighbors.js":
/*!*******************************!*\
  !*** ./src/Grid/Neighbors.js ***!
  \*******************************/
/***/ ((module) => {

eval("// contains local cell values for the following:\n\n//all       ...\n//          .x.\n//          ...\n\n//adjacent   .\n//          .x.\n//           .\n\n//corners   . .\n//           x\n//          . .\n\n//allSelf   ...\n//          ...\n//          ...\n\nconst Neighbors = {\n    all: [[0, 1],[0, -1],[1, 0],[-1, 0],[-1, -1],[1, 1],[-1, 1],[1, -1]],\n    adjacent: [[0, 1],[0, -1],[1, 0],[-1, 0]],\n    corners: [[-1, -1],[1, 1],[-1, 1],[1, -1]],\n    allSelf: [[0, 0],[0, 1],[0, -1],[1, 0],[-1, 0],[-1, -1],[1, 1],[-1, 1],[1, -1]]\n}\n\nmodule.exports = Neighbors;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Grid/Neighbors.js?");

/***/ }),

/***/ "./src/Hyperparameters.js":
/*!********************************!*\
  !*** ./src/Hyperparameters.js ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Neighbors = __webpack_require__(/*! ./Grid/Neighbors */ \"./src/Grid/Neighbors.js\");\nconst CellStates = __webpack_require__(/*! ./Organism/Cell/CellStates */ \"./src/Organism/Cell/CellStates.js\");\n\nconst Hyperparams = {\n    setDefaults: function() {\n        this.lifespanMultiplier = 100;\n        this.foodProdProb = 5;\n        this.killableNeighbors = Neighbors.adjacent;\n        this.edibleNeighbors = Neighbors.adjacent;\n        this.growableNeighbors = Neighbors.adjacent;\n\n        this.useGlobalMutability = false;\n        this.globalMutability = 5;\n        \n        this.rotationEnabled = true;\n\n        this.foodBlocksReproduction = true;\n        this.moversCanProduce = false;\n\n        this.instaKill = false;\n\n        this.lookRange = 20;\n\n        this.foodDropProb = 0;\n\n        this.cost = {};\n        \n        for (var cell of CellStates.living) {\n            this.cost[cell.name] = 1;\n        }\n    },\n\n    loadJsonObj(obj) {\n        for (let key in obj) {\n            this[key] = obj[key];\n        }\n    }\n}\n\nHyperparams.setDefaults();\n\nmodule.exports = Hyperparams;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Hyperparameters.js?");

/***/ }),

/***/ "./src/Organism/Anatomy.js":
/*!*********************************!*\
  !*** ./src/Organism/Anatomy.js ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CellStates = __webpack_require__(/*! ./Cell/CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst BodyCellFactory = __webpack_require__(/*! ./Cell/BodyCells/BodyCellFactory */ \"./src/Organism/Cell/BodyCells/BodyCellFactory.js\");\nconst Hyperparams = __webpack_require__(/*! ../Hyperparameters */ \"./src/Hyperparameters.js\");\n\nclass Anatomy {\n    constructor(owner) {\n        this.owner = owner;\n        this.cells = [];\n        this.is_producer = false;\n        this.is_mover = false;\n        this.has_eyes = false;\n        this.birth_distance = 4;\n        this.total_cost = 0;\n    }\n\n    canAddCellAt(c, r) {\n        for (var cell of this.cells) {\n            if (cell.loc_col == c && cell.loc_row == r){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    addDefaultCell(state, c, r) {\n        var new_cell = BodyCellFactory.createDefault(this.owner, state, c, r);\n        this.cells.push(new_cell);\n        this.total_cost += Hyperparams.cost[state.name];\n        return new_cell;\n    }\n\n    addRandomizedCell(state, c, r) {\n        if (state==CellStates.eye && !this.has_eyes) {\n            this.owner.brain.randomizeDecisions();\n        }\n        var new_cell = BodyCellFactory.createRandom(this.owner, state, c, r);\n        this.cells.push(new_cell);\n        this.total_cost += Hyperparams.cost[state.name];\n        return new_cell;\n    }\n\n    addInheritCell(parent_cell) {\n        var new_cell = BodyCellFactory.createInherited(this.owner, parent_cell);\n        this.cells.push(new_cell);\n        this.total_cost += Hyperparams.cost[new_cell.state.name];\n        return new_cell;\n    }\n\n    replaceCell(state, c, r, randomize=true) {\n        this.removeCell(c, r, true);\n        if (randomize) {\n            return this.addRandomizedCell(state, c, r);\n        }\n        else {\n            return this.addDefaultCell(state, c, r);\n        }\n    }\n\n    removeCell(c, r, allow_center_removal=false) {\n        if (c == 0 && r == 0 && !allow_center_removal)\n            return false;\n        for (var i=0; i<this.cells.length; i++) {\n            var cell = this.cells[i];\n            if (cell.loc_col == c && cell.loc_row == r){\n                this.cells.splice(i, 1);\n                this.total_cost -= Hyperparams.cost[cell.state.name];\n                break;\n            }\n        }\n        this.checkTypeChange(cell.state);\n        return true;\n    }\n\n    getLocalCell(c, r) {\n        for (var cell of this.cells) {\n            if (cell.loc_col == c && cell.loc_row == r){\n                return cell;\n            }\n        }\n        return null;\n    }\n\n    checkTypeChange() {\n        this.is_producer = false;\n        this.is_mover = false;\n        this.has_eyes = false;\n        for (var cell of this.cells) {\n            if (cell.state == CellStates.producer)\n                this.is_producer = true;\n            if (cell.state == CellStates.mover)\n                this.is_mover = true;\n            if (cell.state == CellStates.eye)\n                this.has_eyes = true;\n        }\n    }\n\n    getRandomCell() {\n        return this.cells[Math.floor(Math.random() * this.cells.length)];\n    }\n\n    getNeighborsOfCell(col, row) {\n\n        var neighbors = [];\n\n        for (var x = -1; x <= 1; x++) {\n            for (var y = -1; y <= 1; y++) {\n\n                var neighbor = this.getLocalCell(col + x, row + y);\n                if (neighbor)\n                    neighbors.push(neighbor)\n            }\n        }\n\n        return neighbors;\n    }\n\n    getTotalCost() {\n        return this.total_cost;\n    }\n}\n\nmodule.exports = Anatomy;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/Anatomy.js?");

/***/ }),

/***/ "./src/Organism/Cell/BodyCells/ArmorCell.js":
/*!**************************************************!*\
  !*** ./src/Organism/Cell/BodyCells/ArmorCell.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CellStates = __webpack_require__(/*! ../CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst BodyCell = __webpack_require__(/*! ./BodyCell */ \"./src/Organism/Cell/BodyCells/BodyCell.js\");\n\nclass ArmorCell extends BodyCell{\n    constructor(org, loc_col, loc_row){\n        super(CellStates.armor, org, loc_col, loc_row);\n    }\n}\n\nmodule.exports = ArmorCell;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/Cell/BodyCells/ArmorCell.js?");

/***/ }),

/***/ "./src/Organism/Cell/BodyCells/BodyCell.js":
/*!*************************************************!*\
  !*** ./src/Organism/Cell/BodyCells/BodyCell.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CellStates = __webpack_require__(/*! ../CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst Directions = __webpack_require__(/*! ../../Directions */ \"./src/Organism/Directions.js\");\n\n// A body cell defines the relative location of the cell in it's parent organism. It also defines their functional behavior.\nclass BodyCell{\n    constructor(state, org, loc_col, loc_row){\n        this.state = state;\n        this.org = org;\n        this.loc_col = loc_col;\n        this.loc_row = loc_row;\n\n        var distance = Math.max(Math.abs(loc_row)*2 + 2, Math.abs(loc_col)*2 + 2);\n        if (this.org.anatomy.birth_distance < distance) {\n            this.org.anatomy.birth_distance = distance;\n        }\n    }\n\n    initInherit(parent) {\n        // deep copy parent values\n        this.loc_col = parent.loc_col;\n        this.loc_row = parent.loc_row;\n    }\n    \n    initRandom() {\n        // initialize values randomly\n    }\n\n    initDefault() {\n        // initialize to default values \n    }\n\n    performFunction(env) {\n        // default behavior: none\n    }\n\n\n    getRealCol() {\n        return this.org.c + this.rotatedCol(this.org.rotation);\n    }\n    \n    getRealRow() {\n        return this.org.r + this.rotatedRow(this.org.rotation);\n    }\n\n    getRealCell() {\n        var real_c = this.getRealCol();\n        var real_r = this.getRealRow();\n        return this.org.env.grid_map.cellAt(real_c, real_r);\n    }\n\n    rotatedCol(dir){\n        switch(dir){\n            case Directions.up:\n                return this.loc_col;\n            case Directions.down:\n                return this.loc_col * -1;\n            case Directions.left:\n                return this.loc_row;\n            case Directions.right:\n                return this.loc_row * -1;\n        }\n    }\n\n    rotatedRow(dir){\n        switch(dir){\n            case Directions.up:\n                return this.loc_row;\n            case Directions.down:\n                return this.loc_row * -1;\n            case Directions.left:\n                return this.loc_col * -1;\n            case Directions.right:\n                return this.loc_col;\n        }\n    }\n}\n\nmodule.exports = BodyCell;\n\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/Cell/BodyCells/BodyCell.js?");

/***/ }),

/***/ "./src/Organism/Cell/BodyCells/BodyCellFactory.js":
/*!********************************************************!*\
  !*** ./src/Organism/Cell/BodyCells/BodyCellFactory.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const MouthCell = __webpack_require__(/*! ./MouthCell */ \"./src/Organism/Cell/BodyCells/MouthCell.js\");\nconst ProducerCell = __webpack_require__(/*! ./ProducerCell */ \"./src/Organism/Cell/BodyCells/ProducerCell.js\");\nconst MoverCell = __webpack_require__(/*! ./MoverCell */ \"./src/Organism/Cell/BodyCells/MoverCell.js\");\nconst KillerCell = __webpack_require__(/*! ./KillerCell */ \"./src/Organism/Cell/BodyCells/KillerCell.js\");\nconst ArmorCell = __webpack_require__(/*! ./ArmorCell */ \"./src/Organism/Cell/BodyCells/ArmorCell.js\");\nconst EyeCell = __webpack_require__(/*! ./EyeCell */ \"./src/Organism/Cell/BodyCells/EyeCell.js\");\nconst FatCell = __webpack_require__(/*! ./FatCell */ \"./src/Organism/Cell/BodyCells/FatCell.js\");\nconst CellStates = __webpack_require__(/*! ../CellStates */ \"./src/Organism/Cell/CellStates.js\");\n\n\nconst BodyCellFactory = {\n    init: function() {\n        var type_map = {};\n        type_map[CellStates.mouth.name] = MouthCell;\n        type_map[CellStates.producer.name] = ProducerCell;\n        type_map[CellStates.mover.name] = MoverCell;\n        type_map[CellStates.killer.name] = KillerCell;\n        type_map[CellStates.armor.name] = ArmorCell;\n        type_map[CellStates.eye.name] = EyeCell;\n        type_map[CellStates.fat.name] = FatCell;\n        this.type_map = type_map;\n    },\n\n    createInherited: function(org, to_copy) {\n        var cell = new this.type_map[to_copy.state.name](org, to_copy.loc_col, to_copy.loc_row);\n        cell.initInherit(to_copy);\n        return cell;\n    },\n\n    createRandom: function(org, state, loc_col, loc_row) {\n        var cell = new this.type_map[state.name](org, loc_col, loc_row);\n        cell.initRandom();\n        return cell;\n    },\n\n    createDefault: function(org, state, loc_col, loc_row) {\n        var cell = new this.type_map[state.name](org, loc_col, loc_row);\n        cell.initDefault();\n        return cell;\n    },\n}\nBodyCellFactory.init();\n\nmodule.exports = BodyCellFactory;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/Cell/BodyCells/BodyCellFactory.js?");

/***/ }),

/***/ "./src/Organism/Cell/BodyCells/EyeCell.js":
/*!************************************************!*\
  !*** ./src/Organism/Cell/BodyCells/EyeCell.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CellStates = __webpack_require__(/*! ../CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst BodyCell = __webpack_require__(/*! ./BodyCell */ \"./src/Organism/Cell/BodyCells/BodyCell.js\");\nconst Hyperparams = __webpack_require__(/*! ../../../Hyperparameters */ \"./src/Hyperparameters.js\");\nconst Directions = __webpack_require__(/*! ../../Directions */ \"./src/Organism/Directions.js\");\nconst Observation = __webpack_require__(/*! ../../Perception/Observation */ \"./src/Organism/Perception/Observation.js\")\n\nclass EyeCell extends BodyCell{\n    constructor(org, loc_col, loc_row){\n        super(CellStates.eye, org, loc_col, loc_row);\n        this.org.anatomy.has_eyes = true;\n    }\n\n    initInherit(parent) {\n        // deep copy parent values\n        super.initInherit(parent);\n        this.direction = parent.direction;\n    }\n    \n    initRandom() {\n        // initialize values randomly\n        this.direction = Directions.getRandomDirection();\n    }\n\n    initDefault() {\n        // initialize to default values\n        this.direction = Directions.up;\n    }\n\n    getAbsoluteDirection() {\n        var dir = this.org.rotation + this.direction;\n        if (dir > 3)\n            dir -= 4;\n        return dir;\n    }\n\n    performFunction() {\n        var obs = this.look();\n        this.org.brain.observe(obs);\n    }\n\n    look() {\n        var env = this.org.env;\n        var direction = this.getAbsoluteDirection();\n        var addCol = 0;\n        var addRow = 0;\n        switch(direction) {\n            case Directions.up:\n                addRow = -1;\n                break;\n            case Directions.down:\n                addRow = 1;\n                break;\n            case Directions.right:\n                addCol = 1;\n                break;\n            case Directions.left:\n                addCol = -1;\n                break;\n        }\n        var start_col = this.getRealCol();\n        var start_row = this.getRealRow();\n        var col = start_col;\n        var row = start_row;\n        var cell = null;\n        for (var i=0; i<Hyperparams.lookRange; i++){\n            col+=addCol;\n            row+=addRow;\n            cell = env.grid_map.cellAt(col, row);\n            if (cell == null) {\n                break;\n            }\n            if (cell.state != CellStates.empty){\n                var distance = Math.abs(start_col-col) + Math.abs(start_row-row);\n                return new Observation(cell, distance, direction);\n            }\n        }\n        return new Observation(cell, Hyperparams.lookRange, direction);\n    }\n}\n\nmodule.exports = EyeCell;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/Cell/BodyCells/EyeCell.js?");

/***/ }),

/***/ "./src/Organism/Cell/BodyCells/FatCell.js":
/*!************************************************!*\
  !*** ./src/Organism/Cell/BodyCells/FatCell.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CellStates = __webpack_require__(/*! ../CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst BodyCell = __webpack_require__(/*! ./BodyCell */ \"./src/Organism/Cell/BodyCells/BodyCell.js\");\nconst Hyperparams = __webpack_require__(/*! ../../../Hyperparameters */ \"./src/Hyperparameters.js\");\n\nclass FatCell extends BodyCell{\n    constructor(org, loc_col, loc_row){\n        super(CellStates.fat, org, loc_col, loc_row);\n    }\n\n    performFunction() {\n        var env = this.org.env;\n        var real_c = this.getRealCol();\n        var real_r = this.getRealRow();\n        for (var loc of Hyperparams.edibleNeighbors){\n            var cell = env.grid_map.cellAt(real_c+loc[0], real_r+loc[1]);\n            this.eatNeighbor(cell, env);\n        }\n    }\n\n    eatNeighbor(n_cell, env) {\n        if (n_cell == null)\n            return;\n        if (n_cell.state == CellStates.food){\n            env.changeCell(n_cell.col, n_cell.row, CellStates.empty, null);\n            this.org.lifetime -= Math.random()*this.org.lifetime/this.org.foodNeeded();\n        }\n    }\n}\n\nmodule.exports = FatCell;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/Cell/BodyCells/FatCell.js?");

/***/ }),

/***/ "./src/Organism/Cell/BodyCells/KillerCell.js":
/*!***************************************************!*\
  !*** ./src/Organism/Cell/BodyCells/KillerCell.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CellStates = __webpack_require__(/*! ../CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst BodyCell = __webpack_require__(/*! ./BodyCell */ \"./src/Organism/Cell/BodyCells/BodyCell.js\");\nconst Hyperparams = __webpack_require__(/*! ../../../Hyperparameters */ \"./src/Hyperparameters.js\");\n\nclass KillerCell extends BodyCell{\n    constructor(org, loc_col, loc_row){\n        super(CellStates.killer, org, loc_col, loc_row);\n    }\n\n    performFunction() {\n        var env = this.org.env;\n        var c = this.getRealCol();\n        var r = this.getRealRow();\n        for (var loc of Hyperparams.killableNeighbors) {\n            var cell = env.grid_map.cellAt(c+loc[0], r+loc[1]);\n            this.killNeighbor(cell);\n        }\n    }\n\n    killNeighbor(n_cell) {\n        // console.log(n_cell)\n        if(n_cell == null || n_cell.owner == null || n_cell.owner == this.org || !n_cell.owner.living || n_cell.state == CellStates.armor) \n            return;\n        var is_hit = n_cell.state == CellStates.killer; // has to be calculated before death\n        n_cell.owner.harm();\n        if (Hyperparams.instaKill && is_hit) {\n            this.org.harm();\n        }\n    }\n}\n\nmodule.exports = KillerCell;\n\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/Cell/BodyCells/KillerCell.js?");

/***/ }),

/***/ "./src/Organism/Cell/BodyCells/MouthCell.js":
/*!**************************************************!*\
  !*** ./src/Organism/Cell/BodyCells/MouthCell.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CellStates = __webpack_require__(/*! ../CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst BodyCell = __webpack_require__(/*! ./BodyCell */ \"./src/Organism/Cell/BodyCells/BodyCell.js\");\nconst Hyperparams = __webpack_require__(/*! ../../../Hyperparameters */ \"./src/Hyperparameters.js\");\n\nclass MouthCell extends BodyCell{\n    constructor(org, loc_col, loc_row){\n        super(CellStates.mouth, org, loc_col, loc_row);\n    }\n\n    performFunction() {\n        var env = this.org.env;\n        var real_c = this.getRealCol();\n        var real_r = this.getRealRow();\n        for (var loc of Hyperparams.edibleNeighbors){\n            var cell = env.grid_map.cellAt(real_c+loc[0], real_r+loc[1]);\n            this.eatNeighbor(cell, env);\n        }\n    }\n\n    eatNeighbor(n_cell, env) {\n        if (n_cell == null)\n            return;\n        if (n_cell.state == CellStates.food){\n            env.changeCell(n_cell.col, n_cell.row, CellStates.empty, null);\n            this.org.food_collected += (n_cell.cell_owner && n_cell.cell_owner.food_value) ? n_cell.food_value : 1;\n        }\n    }\n}\n\nmodule.exports = MouthCell;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/Cell/BodyCells/MouthCell.js?");

/***/ }),

/***/ "./src/Organism/Cell/BodyCells/MoverCell.js":
/*!**************************************************!*\
  !*** ./src/Organism/Cell/BodyCells/MoverCell.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CellStates = __webpack_require__(/*! ../CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst BodyCell = __webpack_require__(/*! ./BodyCell */ \"./src/Organism/Cell/BodyCells/BodyCell.js\");\n\nclass MoverCell extends BodyCell{\n    constructor(org, loc_col, loc_row){\n        super(CellStates.mover, org, loc_col, loc_row);\n        this.org.anatomy.is_mover = true;\n    }\n}\n\nmodule.exports = MoverCell;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/Cell/BodyCells/MoverCell.js?");

/***/ }),

/***/ "./src/Organism/Cell/BodyCells/ProducerCell.js":
/*!*****************************************************!*\
  !*** ./src/Organism/Cell/BodyCells/ProducerCell.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CellStates = __webpack_require__(/*! ../CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst BodyCell = __webpack_require__(/*! ./BodyCell */ \"./src/Organism/Cell/BodyCells/BodyCell.js\");\nconst Hyperparams = __webpack_require__(/*! ../../../Hyperparameters */ \"./src/Hyperparameters.js\");\n\nclass ProducerCell extends BodyCell{\n    constructor(org, loc_col, loc_row){\n        super(CellStates.producer, org, loc_col, loc_row);\n        this.org.anatomy.is_producer = true;\n    }\n\n    performFunction() {\n        if (this.org.anatomy.is_mover && !Hyperparams.moversCanProduce)\n            return;\n        var env = this.org.env;\n        var prob = Hyperparams.foodProdProb;\n        var real_c = this.getRealCol();\n        var real_r = this.getRealRow();\n        if (Math.random() * 100 <= prob) {\n            var loc = Hyperparams.growableNeighbors[Math.floor(Math.random() * Hyperparams.growableNeighbors.length)]\n            var loc_c=loc[0];\n            var loc_r=loc[1];\n            var cell = env.grid_map.cellAt(real_c+loc_c, real_r+loc_r);\n            if (cell != null && cell.state == CellStates.empty){\n                env.changeCell(real_c+loc_c, real_r+loc_r, CellStates.food, null);\n                return;\n            }\n        }\n    }\n}\n\nmodule.exports = ProducerCell;\n\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/Cell/BodyCells/ProducerCell.js?");

/***/ }),

/***/ "./src/Organism/Cell/CellStates.js":
/*!*****************************************!*\
  !*** ./src/Organism/Cell/CellStates.js ***!
  \*****************************************/
/***/ ((module) => {

eval("// A cell state is used to differentiate type and render the cell\nclass CellState{\n    constructor(name, dc_code = ':__:') {\n        this.name = name;\n        this.color = 'black';\n        this.dc_code = dc_code;\n    }\n\n    render(ctx, cell, size) {\n        ctx.fillStyle = this.color;\n        ctx.fillRect(cell.x, cell.y, size, size);\n    }\n}\n\nclass Empty extends CellState {\n    constructor() {\n        super('empty',':vd:');\n    }\n}\nclass Food extends CellState {\n    constructor() {\n        super('food',':food:');\n    }\n}\nclass Wall extends CellState {\n    constructor() {\n        super('wall',':wall:');\n    }\n}\nclass Mouth extends CellState {\n    constructor() {\n        super('mouth',':eat:');\n    }\n}\nclass Producer extends CellState {\n    constructor() {\n        super('producer',':prod:');\n    }\n}\nclass Mover extends CellState {\n    constructor() {\n        super('mover',':mov:');\n    }\n}\nclass Killer extends CellState {\n    constructor() {\n        super('killer',':kill:');\n    }\n}\nclass Armor extends CellState {\n    constructor() {\n        super('armor',':arm:');\n    }\n}\nclass Eye extends CellState {\n    constructor() {\n        super('eye',':eye:');\n        this.slit_color = 'black';\n    }\n    render(ctx, cell, size) {\n        ctx.fillStyle = this.color;\n        ctx.fillRect(cell.x, cell.y, size, size);\n        if(size == 1)\n            return;\n        var half = size/2;\n        var x = -(size)/8\n        var y = -half;\n        var h = size/2 + size/4;\n        var w = size/4;\n        ctx.translate(cell.x+half, cell.y+half);\n        ctx.rotate((cell.cell_owner.getAbsoluteDirection() * 90) * Math.PI / 180);\n        ctx.fillStyle = this.slit_color;\n        ctx.fillRect(x, y, w, h);\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n    }\n}\nclass Fat extends CellState {\n    constructor() {\n        super('fat',':fat:');\n    }\n}\n\nconst CellStates = {\n    empty: new Empty(),\n    food: new Food(),\n    wall: new Wall(),\n    mouth: new Mouth(),\n    producer: new Producer(),\n    mover: new Mover(),\n    killer: new Killer(),\n    armor: new Armor(),\n    eye: new Eye(),\n    fat: new Fat(),\n    defineLists() {\n        this.all = [this.empty, this.food, this.wall, this.mouth, this.producer, this.mover, this.killer, this.armor, this.eye, this.fat];\n        this.living = [this.mouth, this.producer, this.mover, this.killer, this.armor, this.eye, this.fat];\n    },\n    getRandomName: function() {\n        return this.all[Math.floor(Math.random() * this.all.length)].name;\n    },\n    getRandomLivingType: function() {\n        return this.living[Math.floor(Math.random() * this.living.length)];\n    }\n}\n\nCellStates.defineLists();\n\nmodule.exports = CellStates;\n\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/Cell/CellStates.js?");

/***/ }),

/***/ "./src/Organism/Cell/GridCell.js":
/*!***************************************!*\
  !*** ./src/Organism/Cell/GridCell.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CellStates = __webpack_require__(/*! ./CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst Hyperparams = __webpack_require__(/*! ../../Hyperparameters */ \"./src/Hyperparameters.js\");\n\n// A cell exists in a grid map.\nclass Cell{\n    constructor(state, col, row, x, y){\n        this.owner = null; // owner organism\n        this.cell_owner = null; // specific body cell of the owner organism that occupies this grid cell\n        this.setType(state);\n        this.col = col;\n        this.row = row;\n        this.x = x;\n        this.y = y;\n    }\n\n    setType(state) {\n        this.state = state;\n    }\n}\n\nmodule.exports = Cell;\n\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/Cell/GridCell.js?");

/***/ }),

/***/ "./src/Organism/Directions.js":
/*!************************************!*\
  !*** ./src/Organism/Directions.js ***!
  \************************************/
/***/ ((module) => {

eval("const Directions = {\n    up:0,\n    right:1,\n    down:2,\n    left:3,\n    scalars:[[0,-1],[1,0],[0,1],[-1,0]],\n    getRandomDirection: function() {\n        return Math.floor(Math.random() * 4);\n    },\n    getRandomScalar: function() {\n        return this.scalars[Math.floor(Math.random() * this.scalars.length)];\n    },\n    getOppositeDirection: function(dir) {\n        switch(dir){\n            case this.up:\n                return this.down;\n            case this.down:\n                return this.up;\n            case this.left:\n                return this.right;\n            case this.right:\n                return this.left;\n        }\n    },\n    rotateRight: function(dir) {\n        dir++;\n        if (dir > 3){\n            dir = 0;\n        }\n        return dir;\n    }\n}\n\nmodule.exports = Directions;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/Directions.js?");

/***/ }),

/***/ "./src/Organism/Organism.js":
/*!**********************************!*\
  !*** ./src/Organism/Organism.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CellStates = __webpack_require__(/*! ./Cell/CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst Neighbors = __webpack_require__(/*! ../Grid/Neighbors */ \"./src/Grid/Neighbors.js\");\nconst Hyperparams = __webpack_require__(/*! ../Hyperparameters */ \"./src/Hyperparameters.js\");\nconst Directions = __webpack_require__(/*! ./Directions */ \"./src/Organism/Directions.js\");\nconst Anatomy = __webpack_require__(/*! ./Anatomy */ \"./src/Organism/Anatomy.js\");\nconst Brain = __webpack_require__(/*! ./Perception/Brain */ \"./src/Organism/Perception/Brain.js\");\nconst FossilRecord = __webpack_require__(/*! ../Stats/FossilRecord */ \"./src/Stats/FossilRecord.js\");\n\nclass Organism {\n    constructor(col, row, env, parent=null) {\n        this.c = col;\n        this.r = row;\n        this.env = env;\n        this.lifetime = 0;\n        this.food_collected = 0;\n        this.living = true;\n        this.anatomy = new Anatomy(this)\n        this.direction = Directions.down; // direction of movement\n        this.rotation = Directions.up; // direction of rotation\n        this.can_rotate = Hyperparams.rotationEnabled;\n        this.move_count = 0;\n        this.move_range = 4;\n        this.ignore_brain_for = 0;\n        this.mutability = 5;\n        this.addProb = 33;\n        this.changeProb = 33;\n        this.removeProb = 33;\n        this.damage = 0;\n        this.brain = new Brain(this);\n        if (parent != null) {\n            this.inherit(parent);\n        }\n    }\n\n    inherit(parent) {\n        this.move_range = parent.move_range;\n        this.mutability = parent.mutability;\n        this.addProb = parent.addProb;\n        this.changeProb = parent.changeProb;\n        this.removeProb = parent.removeProb;\n        this.species = parent.species;\n        // this.birth_distance = parent.birth_distance;\n        for (var c of parent.anatomy.cells){\n            //deep copy parent cells\n            this.anatomy.addInheritCell(c);\n        }\n        if(parent.anatomy.is_mover) {\n            for (var i in parent.brain.decisions) {\n                this.brain.decisions[i] = parent.brain.decisions[i];\n            }\n        }\n    }\n\n    // amount of food required before it can reproduce\n    foodNeeded() {\n        return this.anatomy.getTotalCost();\n    }\n\n    lifespan() {\n        return this.anatomy.cells.length * Hyperparams.lifespanMultiplier;\n    }\n\n    maxHealth() {\n        return this.anatomy.cells.length;\n    }\n\n    reproduce() {\n        //produce mutated child\n        //check nearby locations (is there room and a direct path)\n        var org = new Organism(0, 0, this.env, this);\n        if(Hyperparams.rotationEnabled){\n            org.rotation = Directions.getRandomDirection();\n        }\n        var prob = this.mutability;\n        if (Hyperparams.useGlobalMutability){\n            prob = Hyperparams.globalMutability;\n        }\n        else {\n            //mutate the mutability\n            if (Math.random() <= 0.5)\n                org.mutability++;\n            else{ \n                org.mutability--;\n                if (org.mutability < 1)\n                    org.mutability = 1;\n            }\n            var amount;\n            var mutation_type_mutability = 5;\n            //mutate the add probability\n            amount = Math.random()*mutation_type_mutability - mutation_type_mutability/2;\n            org.addProb += amount;\n            org.addProb = Math.min(Math.max(org.addProb, 0), 100);\n            org.changeProb -= amount/2;\n            org.removeProb -= amount/2;\n            //fix the probabilities (floating point errors)\n            org.changeProb = Math.min(Math.max(100 - org.addProb - org.removeProb, 0), 100);\n            org.removeProb = Math.min(Math.max(100 - org.addProb - org.changeProb, 0), 100);\n            //mutate the change probability\n            amount = Math.random()*mutation_type_mutability - mutation_type_mutability/2;\n            org.changeProb += amount;\n            org.changeProb = Math.min(Math.max(org.changeProb, 0), 100);\n            org.addProb -= amount/2;\n            org.removeProb -= amount/2;\n            //fix the probabilities (floating point errors)\n            org.addProb = Math.min(Math.max(100 - org.changeProb - org.removeProb, 0), 100);\n            org.removeProb = Math.min(Math.max(100 - org.changeProb - org.addProb, 0), 100);\n            //mutate the remove probability\n            amount = Math.random()*mutation_type_mutability - mutation_type_mutability/2;\n            org.removeProb += amount;\n            org.removeProb = Math.min(Math.max(org.removeProb, 0), 100);\n            org.addProb -= amount/2;\n            org.changeProb -= amount/2;\n            //fix the probabilities (floating point errors)\n            org.addProb = Math.min(Math.max(100 - org.removeProb - org.changeProb, 0), 100);\n            org.changeProb = Math.min(Math.max(100 - org.removeProb - org.addProb, 0), 100);\n        } \n        var mutated = false;\n        if (Math.random() * 100 <= prob) {\n            if (org.anatomy.is_mover && Math.random() * 100 <= 10) { \n                if (org.anatomy.has_eyes) {\n                    org.brain.mutate();\n                }\n                org.move_range += Math.floor(Math.random() * 4) - 2;\n                if (org.move_range <= 0){\n                    org.move_range = 1;\n                };\n                \n            }\n            else {\n                mutated = org.mutate();\n            }\n        }\n\n        var direction = Directions.getRandomScalar();\n        var direction_c = direction[0];\n        var direction_r = direction[1];\n        var offset = (Math.floor(Math.random() * 3));\n        var basemovement = this.anatomy.birth_distance;\n        var new_c = this.c + (direction_c*basemovement) + (direction_c*offset);\n        var new_r = this.r + (direction_r*basemovement) + (direction_r*offset);\n\n        // console.log(org.isClear(new_c, new_r, org.rotation, true))\n        if (org.isClear(new_c, new_r, org.rotation, true) && org.isStraightPath(new_c, new_r, this.c, this.r, this)){\n            org.c = new_c;\n            org.r = new_r;\n            this.env.addOrganism(org);\n            org.updateGrid();\n            if (mutated) {\n                FossilRecord.addSpecies(org, this.species);\n            }\n            else {\n                org.species.addPop();\n            }\n        }\n        Math.max(this.food_collected -= this.foodNeeded(), 0);\n\n    }\n\n    mutate() {\n        let mutated = false;\n        if (this.calcRandomChance(this.addProb)) {\n            let branch = this.anatomy.getRandomCell();\n            let state = CellStates.getRandomLivingType();//branch.state;\n            let growth_direction = Neighbors.all[Math.floor(Math.random() * Neighbors.all.length)]\n            let c = branch.loc_col+growth_direction[0];\n            let r = branch.loc_row+growth_direction[1];\n            if (this.anatomy.canAddCellAt(c, r)){\n                mutated = true;\n                this.anatomy.addRandomizedCell(state, c, r);\n            }\n        }\n        if (this.calcRandomChance(this.changeProb)){\n            let cell = this.anatomy.getRandomCell();\n            let state = CellStates.getRandomLivingType();\n            this.anatomy.replaceCell(state, cell.loc_col, cell.loc_row);\n            mutated = true;\n        }\n        if (this.calcRandomChance(this.removeProb)){\n            if(this.anatomy.cells.length > 1) {\n                let cell = this.anatomy.getRandomCell();\n                mutated = this.anatomy.removeCell(cell.loc_col, cell.loc_row);\n            }\n        }\n        return mutated;\n    }\n\n    calcRandomChance(prob) {\n        return (Math.random() * 100) < prob;\n    }\n\n    attemptMove() {\n        var direction = Directions.scalars[this.direction];\n        var direction_c = direction[0];\n        var direction_r = direction[1];\n        var new_c = this.c + direction_c;\n        var new_r = this.r + direction_r;\n        if (this.isClear(new_c, new_r)) {\n            for (var cell of this.anatomy.cells) {\n                var real_c = this.c + cell.rotatedCol(this.rotation);\n                var real_r = this.r + cell.rotatedRow(this.rotation);\n                this.env.changeCell(real_c, real_r, CellStates.empty, null);\n            }\n            this.c = new_c;\n            this.r = new_r;\n            this.updateGrid();\n            return true;\n        }\n        return false;\n    }\n\n    attemptRotate() {\n        if(!this.can_rotate){\n            this.direction = Directions.getRandomDirection();\n            this.move_count = 0;\n            return true;\n        }\n        var new_rotation = Directions.getRandomDirection();\n        if(this.isClear(this.c, this.r, new_rotation)){\n            for (var cell of this.anatomy.cells) {\n                var real_c = this.c + cell.rotatedCol(this.rotation);\n                var real_r = this.r + cell.rotatedRow(this.rotation);\n                this.env.changeCell(real_c, real_r, CellStates.empty, null);\n            }\n            this.rotation = new_rotation;\n            this.direction = Directions.getRandomDirection();\n            this.updateGrid();\n            this.move_count = 0;\n            return true;\n        }\n        return false;\n    }\n\n    changeDirection(dir) {\n        this.direction = dir;\n        this.move_count = 0;\n    }\n\n    // assumes either c1==c2 or r1==r2, returns true if there is a clear path from point 1 to 2\n    isStraightPath(c1, r1, c2, r2, parent){\n        if (c1 == c2) {\n            if (r1 > r2){\n                var temp = r2;\n                r2 = r1;\n                r1 = temp;\n            }\n            for (var i=r1; i!=r2; i++) {\n                var cell = this.env.grid_map.cellAt(c1, i)\n                if (!this.isPassableCell(cell, parent)){\n                    return false;\n                }\n            }\n            return true;\n        }\n        else {\n            if (c1 > c2){\n                var temp = c2;\n                c2 = c1;\n                c1 = temp;\n            }\n            for (var i=c1; i!=c2; i++) {\n                var cell = this.env.grid_map.cellAt(i, r1);\n                if (!this.isPassableCell(cell, parent)){\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    isPassableCell(cell, parent){\n        return cell != null && (cell.state == CellStates.empty || cell.owner == this || cell.owner == parent || cell.state == CellStates.food);\n    }\n\n    isClear(col, row, rotation=this.rotation) {\n        for(var loccell of this.anatomy.cells) {\n            var cell = this.getRealCell(loccell, col, row, rotation);\n            if (cell==null) {\n                return false;\n            }\n            if (cell.owner==this || cell.state==CellStates.empty || (!Hyperparams.foodBlocksReproduction && cell.state==CellStates.food)){\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n\n    harm() {\n        this.damage++;\n        if (this.damage >= this.maxHealth() || Hyperparams.instaKill) {\n            this.die();\n        }\n    }\n\n    die() {\n        for (var cell of this.anatomy.cells) {\n            var real_c = this.c + cell.rotatedCol(this.rotation);\n            var real_r = this.r + cell.rotatedRow(this.rotation);\n            if(Hyperparams.cost[cell.state.name] > 0.001) {\n                this.env.changeCell(real_c, real_r, CellStates.food, {food_value: Hyperparams.cost[cell.state.name]});\n            }else{\n                this.env.changeCell(real_c, real_r, CellStates.empty, null);\n            }\n        }\n        this.species.decreasePop();\n        this.living = false;\n    }\n\n    updateGrid() {\n        for (var cell of this.anatomy.cells) {\n            var real_c = this.c + cell.rotatedCol(this.rotation);\n            var real_r = this.r + cell.rotatedRow(this.rotation);\n            this.env.changeCell(real_c, real_r, cell.state, cell);\n        }\n    }\n\n    update() {\n        this.lifetime++;\n        if (this.lifetime > this.lifespan()) {\n            this.die();\n            return this.living;\n        }\n        if (this.food_collected >= this.foodNeeded()) {\n            this.reproduce();\n        }\n        for (var cell of this.anatomy.cells) {\n            cell.performFunction();\n            if (!this.living)\n                return this.living\n        }\n        \n        if (this.anatomy.is_mover) {\n            this.move_count++;\n            var changed_dir = false;\n            if (this.ignore_brain_for == 0){\n                changed_dir = this.brain.decide();\n            }  \n            else{\n                this.ignore_brain_for --;\n            }\n            var moved = this.attemptMove();\n            if ((this.move_count > this.move_range && !changed_dir) || !moved){\n                var rotated = this.attemptRotate();\n                if (!rotated) {\n                    this.changeDirection(Directions.getRandomDirection());\n                    if (changed_dir)\n                        this.ignore_brain_for = this.move_range + 1;\n                }\n            }\n        }\n\n        return this.living;\n    }\n\n    getRealCell(local_cell, c=this.c, r=this.r, rotation=this.rotation){\n        var real_c = c + local_cell.rotatedCol(rotation);\n        var real_r = r + local_cell.rotatedRow(rotation);\n        return this.env.grid_map.cellAt(real_c, real_r);\n    }\n\n}\n\nmodule.exports = Organism;\n\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/Organism.js?");

/***/ }),

/***/ "./src/Organism/Perception/Brain.js":
/*!******************************************!*\
  !*** ./src/Organism/Perception/Brain.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Hyperparams = __webpack_require__(/*! ../../Hyperparameters */ \"./src/Hyperparameters.js\");\nconst Directions = __webpack_require__(/*! ../Directions */ \"./src/Organism/Directions.js\");\nconst CellStates = __webpack_require__(/*! ../Cell/CellStates */ \"./src/Organism/Cell/CellStates.js\");\n\nconst Decision = {\n    neutral: 0,\n    retreat: 1,\n    chase: 2,\n    getRandom: function(){\n        return Math.floor(Math.random() * 3);\n    },\n    getRandomNonNeutral: function() {\n        return Math.floor(Math.random() * 2)+1;\n    }\n}\n\nclass Brain {\n    constructor(owner){\n        this.owner = owner;\n        this.observations = [];\n\n        // corresponds to CellTypes\n        this.decisions = [];\n        this.decisions[CellStates.empty.name] = Decision.neutral;\n        this.decisions[CellStates.food.name] = Decision.chase;\n        this.decisions[CellStates.wall.name] = Decision.neutral;\n        this.decisions[CellStates.mouth.name] = Decision.neutral;\n        this.decisions[CellStates.producer.name] = Decision.neutral;\n        this.decisions[CellStates.mover.name] = Decision.neutral;\n        this.decisions[CellStates.killer.name] = Decision.retreat;\n        this.decisions[CellStates.armor.name] = Decision.neutral;\n        this.decisions[CellStates.eye.name] = Decision.neutral;\n        this.decisions[CellStates.fat.name] = Decision.neutral;\n    }\n\n    randomizeDecisions(randomize_all=false) {\n        // randomize the non obvious decisions\n        if (randomize_all) {\n            this.decisions[CellStates.food.name] = Decision.getRandom();\n            this.decisions[CellStates.killer.name] = Decision.getRandom();\n        }\n        this.decisions[CellStates.mouth.name] = Decision.getRandom();\n        this.decisions[CellStates.producer.name] = Decision.getRandom();\n        this.decisions[CellStates.mover.name] = Decision.getRandom();\n        this.decisions[CellStates.armor.name] = Decision.getRandom();\n        this.decisions[CellStates.eye.name] = Decision.getRandom();\n        this.decisions[CellStates.fat.name] = Decision.getRandom();\n    }\n\n    observe(observation) {\n        this.observations.push(observation);\n    }\n\n    decide() {\n        var decision = Decision.neutral;\n        var closest = Hyperparams.lookRange + 1;\n        var move_direction = 0;\n        for (var obs of this.observations) {\n            if (obs.cell == null || obs.cell.owner == this.owner) {\n                continue;\n            }\n            if (obs.distance < closest) {\n                // console.log(obs.cell.state)\n                decision = this.decisions[obs.cell.state.name];\n                // console.log(decision)\n                move_direction = obs.direction;\n                closest = obs.distance;\n            }\n        }\n        this.observations = [];\n        if (decision == Decision.chase) {\n            this.owner.changeDirection(move_direction);\n            return true;\n        }\n        else if (decision == Decision.retreat) {\n            this.owner.changeDirection(Directions.getOppositeDirection(move_direction));\n            return true;\n        }\n        return false;\n    }\n\n    mutate() {\n        this.decisions[CellStates.getRandomName()] = Decision.getRandom();\n        this.decisions[CellStates.empty.name] = Decision.neutral; // if the empty cell has a decision it gets weird\n    }\n}\n\nBrain.Decision = Decision;\n\nmodule.exports = Brain;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/Perception/Brain.js?");

/***/ }),

/***/ "./src/Organism/Perception/Observation.js":
/*!************************************************!*\
  !*** ./src/Organism/Perception/Observation.js ***!
  \************************************************/
/***/ ((module) => {

eval("class Observation {\n    constructor(cell, distance, direction){\n        this.cell = cell;\n        this.distance = distance;\n        this.direction = direction;\n    }\n}\n\nmodule.exports = Observation;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/Perception/Observation.js?");

/***/ }),

/***/ "./src/Organism/RandomOrganismGenerator.js":
/*!*************************************************!*\
  !*** ./src/Organism/RandomOrganismGenerator.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CellStates = __webpack_require__(/*! ./Cell/CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst Organism = __webpack_require__(/*! ./Organism */ \"./src/Organism/Organism.js\");\nconst Brain = __webpack_require__(/*! ./Perception/Brain */ \"./src/Organism/Perception/Brain.js\")\n\nclass RandomOrganismGenerator {\n\n    static generate(env) {\n\n        var center = env.grid_map.getCenter();\n        var organism = new Organism(center[0], center[1], env, null);\n        organism.anatomy.addDefaultCell(CellStates.mouth, 0, 0);\n\n        var outermostLayer = RandomOrganismGenerator.organismLayers;\n        var x, y;\n\n        // iterate from center to edge of organism\n        // layer 0 is the central cell of the organism\n        for (var layer = 1; layer <= outermostLayer; layer++) {\n\n            var someCellSpawned = false;\n            var spawnChance = RandomOrganismGenerator.cellSpawnChance * 1 - ((layer - 1) / outermostLayer);\n\n            // top\n            y = -layer;\n            for (x = -layer; x <= layer; x++)\n                someCellSpawned = RandomOrganismGenerator.trySpawnCell(organism, x, y, spawnChance);\n\n            // bottom\n            y = layer;\n            for (x = -layer; x <= layer; x++) \n                someCellSpawned = RandomOrganismGenerator.trySpawnCell(organism, x, y, spawnChance);\n\n            // left\n            x = -layer;\n            for (y = -layer + 1; y <= layer - 1; y++) \n                someCellSpawned = RandomOrganismGenerator.trySpawnCell(organism, x, y, spawnChance);\n\n            // right\n            x = layer;\n            for (y = -layer + 1; y < layer - 1; y++)\n                someCellSpawned = RandomOrganismGenerator.trySpawnCell(organism, x, y, spawnChance);\n\n            if (!someCellSpawned)\n                break;\n        }\n\n        // randomize the organism's brain\n        organism.brain.randomizeDecisions(true);\n\n        return organism;\n    }\n\n    static trySpawnCell(organism, x, y, spawnChance) {\n\n        var neighbors = organism.anatomy.getNeighborsOfCell(x, y);\n        if (neighbors.length && Math.random() < spawnChance) {\n            organism.anatomy.addRandomizedCell(CellStates.getRandomLivingType(), x, y);\n            return true;\n        }\n        return false;\n    }\n\n}\n\nRandomOrganismGenerator.organismLayers = 4;\nRandomOrganismGenerator.cellSpawnChance = 0.75;\n\nmodule.exports = RandomOrganismGenerator;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Organism/RandomOrganismGenerator.js?");

/***/ }),

/***/ "./src/Rendering/ColorScheme.js":
/*!**************************************!*\
  !*** ./src/Rendering/ColorScheme.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CellStates = __webpack_require__(/*! ../Organism/Cell/CellStates */ \"./src/Organism/Cell/CellStates.js\");\n\nvar color_scheme = {\n    \"empty\":\"#0E1318\",\n    \"food\":\"#2F7AB7\",\n    \"wall\":\"gray\",\n    \"mouth\":\"#DEB14D\",\n    \"producer\":\"#15DE59\",\n    \"mover\":\"#60D4FF\",\n    \"killer\":\"#F82380\",\n    \"armor\":\"#7230DB\",\n    \"eye\":\"#B6C1EA\",\n    \"eye-slit\": \"#0E1318\",\n    \"fat\":\"#F9E8B3\",\n}\n\n// Renderer controls access to a canvas. There is one renderer for each canvas\nclass ColorScheme {\n    constructor(world_env, editor_env) {\n        this.world_env = world_env;\n        this.editor_env = editor_env;\n    }\n\n    loadColorScheme() {\n        for (var state of CellStates.all) {\n            state.color = color_scheme[state.name];\n        }\n      \n        CellStates.eye.slit_color=color_scheme['eye-slit'];\n      \n        for (var cell_type in color_scheme) {\n            $('#'+cell_type+'.cell-type ').css('background-color', color_scheme[cell_type]);\n            $('#'+cell_type+'.cell-legend-type').css('background-color', color_scheme[cell_type]);\n            $('#'+cell_type+'.cell-legend-type-living').css('background-color', color_scheme[cell_type]);\n            \n        }\n        this.world_env.renderer.renderFullGrid(this.world_env.grid_map.grid);\n        this.editor_env.renderer.renderFullGrid(this.editor_env.grid_map.grid);\n    }\n}\n\nmodule.exports = ColorScheme;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Rendering/ColorScheme.js?");

/***/ }),

/***/ "./src/Rendering/Renderer.js":
/*!***********************************!*\
  !*** ./src/Rendering/Renderer.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// const CellTypes = require(\"../Organism/Cell/CellTypes\");\nconst CellStates = __webpack_require__(/*! ../Organism/Cell/CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst Directions = __webpack_require__(/*! ../Organism/Directions */ \"./src/Organism/Directions.js\");\n\n// Renderer controls access to a canvas. There is one renderer for each canvas\nclass Renderer {\n    constructor(canvas_id, container_id, cell_size) {\n        this.cell_size = cell_size;\n        this.canvas = document.getElementById(canvas_id);\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.fillWindow(container_id)\n\t\tthis.height = this.canvas.height;\n        this.width = this.canvas.width;\n        this.cells_to_render = new Set();\n        this.cells_to_highlight = new Set();\n        this.highlighted_cells = new Set();\n    }\n\n    fillWindow(container_id) {\n        this.fillShape($('#'+container_id).height(), $('#'+container_id).width());\n    }\n\n    fillShape(height, width) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.height = this.canvas.height;\n        this.width = this.canvas.width;\n    }\n\n    clear() {\n        this.ctx.fillStyle = 'white';\n        this.ctx.fillRect(0, 0, this.height, this.width);\n    }\n\n    renderFullGrid(grid) {\n        for (var col of grid) {\n            for (var cell of col){\n                this.renderCell(cell);\n            }\n        }\n    }\n\n    renderCells() {\n        for (var cell of this.cells_to_render) {\n            this.renderCell(cell);\n        }\n        this.cells_to_render.clear();\n    }\n\n    renderCell(cell) {\n        cell.state.render(this.ctx, cell, this.cell_size);\n    }\n\n    renderOrganism(org) {\n        for(var org_cell of org.anatomy.cells) {\n            var cell = org.getRealCell(org_cell);\n            this.renderCell(cell);\n        }\n    }\n\n    addToRender(cell) {\n        if (this.highlighted_cells.has(cell)){\n            this.cells_to_highlight.add(cell);\n        }\n        this.cells_to_render.add(cell);\n    }\n\n    renderHighlights() {\n        for (var cell of this.cells_to_highlight) {\n            this.renderCellHighlight(cell);\n            this.highlighted_cells.add(cell);\n        }\n        this.cells_to_highlight.clear();\n        \n    }\n\n    highlightOrganism(org) {\n        for(var org_cell of org.anatomy.cells) {\n            var cell = org.getRealCell(org_cell);\n            this.cells_to_highlight.add(cell);\n        }\n    }\n\n    highlightCell(cell) {\n        this.cells_to_highlight.add(cell);\n    }\n\n    renderCellHighlight(cell, color=\"yellow\") {\n        this.renderCell(cell);\n        this.ctx.fillStyle = color;\n        this.ctx.globalAlpha = 0.5;\n        this.ctx.fillRect(cell.x, cell.y, this.cell_size, this.cell_size);\n        this.ctx.globalAlpha = 1;\n        this.highlighted_cells.add(cell);\n    }\n\n    clearAllHighlights(clear_to_highlight=false) {\n        for (var cell of this.highlighted_cells) {\n            this.renderCell(cell);\n        }\n        this.highlighted_cells.clear();\n        if (clear_to_highlight) {\n            this.cells_to_highlight.clear();\n        }\n    }\n}\n\nmodule.exports = Renderer;\n\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Rendering/Renderer.js?");

/***/ }),

/***/ "./src/Stats/Charts/CellsChart.js":
/*!****************************************!*\
  !*** ./src/Stats/Charts/CellsChart.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CellStates = __webpack_require__(/*! ../../Organism/Cell/CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst FossilRecord = __webpack_require__(/*! ../FossilRecord */ \"./src/Stats/FossilRecord.js\");\nconst ChartController = __webpack_require__(/*! ./ChartController */ \"./src/Stats/Charts/ChartController.js\");\n\nclass CellsChart extends ChartController {\n    constructor() {\n        super(\"Organism Size / Composition\", \n            \"Avg. Number of Cells per Organism\",\n            \"Note: to maintain efficiency, species with very small populations are discarded when collecting cell statistics.\");\n    }\n\n    setData() {\n        this.clear();\n      \n        //this.mouth, this.producer, this.mover, this.killer, this.armor, this.eye, this.fat\n        this.data.push({\n                type: \"line\",\n                markerType: \"none\",\n                color: 'black',\n                showInLegend: true, \n                name: \"pop1\",\n                legendText: \"Avg. organism size\",\n                dataPoints: []\n            }\n        );\n        for (var c of CellStates.living) {\n            this.data.push({\n                type: \"line\",\n                markerType: \"none\",\n                color: c.color,\n                showInLegend: true, \n                name: c.name,\n                legendText: \"Avg. \" + c.name + \" cells\",\n                dataPoints: []\n            }\n        );\n        }\n        this.addAllDataPoints();\n\n\n    }\n\n    addDataPoint(i) {\n        var t = FossilRecord.tick_record[i];\n        var p = FossilRecord.av_cells[i];\n        this.data[0].dataPoints.push({x:t, y:p});\n        var j=1;\n        for (var name in FossilRecord.av_cell_counts[i]) {\n            var count = FossilRecord.av_cell_counts[i][name];\n            this.data[j].dataPoints.push({x:t,y:count})\n            j++;\n        }\n    }\n}\n\nmodule.exports = CellsChart;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Stats/Charts/CellsChart.js?");

/***/ }),

/***/ "./src/Stats/Charts/ChartController.js":
/*!*********************************************!*\
  !*** ./src/Stats/Charts/ChartController.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const FossilRecord = __webpack_require__(/*! ../FossilRecord */ \"./src/Stats/FossilRecord.js\");\n\nclass ChartController {\n    constructor(title, y_axis=\"\", note=\"\") {\n        this.data = [];\n        this.chart = new CanvasJS.Chart(\"chartContainer\", {\n            zoomEnabled: true,\n            title:{\n                text: title\n            },\n            axisX:{\n                title: \"Ticks\",\n                minimum: 0,\n            },\n            axisY:{\n                title: y_axis,\n                minimum: 0,\n            },\n            data: this.data\n        });\n        this.chart.render();\n        $('#chart-note').text(note);\n    }\n\n    setData() {\n        alert(\"Must override updateData!\");\n    }\n\n    setMinimum() {\n        var min = 0;\n        if (this.data[0].dataPoints != [])\n            min = this.data[0].dataPoints[0].x;\n        this.chart.options.axisX.minimum = min;\n    }\n\n    addAllDataPoints(){\n        for (var i in FossilRecord.tick_record) {\n            this.addDataPoint(i)\n        }\n    }\n\n    render() {\n        this.setMinimum();\n        this.chart.render();\n    }\n\n    updateData() {\n        let record_size = FossilRecord.tick_record.length;\n        let data_points = this.data[0].dataPoints;\n        let newest_t = -1;\n        if (data_points.length>0) {\n            newest_t = this.data[0].dataPoints[data_points.length-1].x;\n        }\n        let to_add = 0;\n        let cur_t = FossilRecord.tick_record[record_size-1];\n        // first count up the number of new datapoints the chart is missing\n        while (cur_t !== newest_t) {\n            to_add++;\n            cur_t = FossilRecord.tick_record[record_size-to_add-1]\n        }\n        // then add them in order\n        this.addNewest(to_add)\n\n        // remove oldest datapoints until the chart is the same size as the saved records\n        while (data_points.length > FossilRecord.tick_record.length) {\n            this.removeOldest();\n        }\n    }\n\n    addNewest(to_add) {\n        for (let i=to_add; i>0; i--) {\n            let j = FossilRecord.tick_record.length-i;\n            this.addDataPoint(j);\n        }\n    }\n\n    removeOldest() {\n        for (var dps of this.data) {\n            dps.dataPoints.shift();\n        }\n    }\n\n    addDataPoint(i) {\n        alert(\"Must override addDataPoint\")\n    }\n\n    clear() {\n        this.data.length = 0;\n        this.chart.render();\n    }\n}\n\nmodule.exports = ChartController;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Stats/Charts/ChartController.js?");

/***/ }),

/***/ "./src/Stats/Charts/MutationChart.js":
/*!*******************************************!*\
  !*** ./src/Stats/Charts/MutationChart.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const FossilRecord = __webpack_require__(/*! ../FossilRecord */ \"./src/Stats/FossilRecord.js\");\nconst ChartController = __webpack_require__(/*! ./ChartController */ \"./src/Stats/Charts/ChartController.js\");\n\nclass MutationChart extends ChartController {\n    constructor() {\n        super(\"Mutation Rate\");\n    }\n\n    setData() {\n        this.clear();\n        this.data.push({\n                type: \"line\",\n                markerType: \"none\",\n                color: 'black',\n                showInLegend: true, \n                name: \"pop1\",\n                legendText: \"Average Mutation Rate\",\n                dataPoints: []\n            }\n        );\n        this.addAllDataPoints();\n    }\n\n    addDataPoint(i) {\n        var t = FossilRecord.tick_record[i];\n        var p = FossilRecord.av_mut_rates[i];\n        this.data[0].dataPoints.push({x:t, y:p});\n    }\n}\n\nmodule.exports = MutationChart;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Stats/Charts/MutationChart.js?");

/***/ }),

/***/ "./src/Stats/Charts/PopulationChart.js":
/*!*********************************************!*\
  !*** ./src/Stats/Charts/PopulationChart.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const FossilRecord = __webpack_require__(/*! ../FossilRecord */ \"./src/Stats/FossilRecord.js\");\nconst ChartController = __webpack_require__(/*! ./ChartController */ \"./src/Stats/Charts/ChartController.js\");\n\nclass PopulationChart extends ChartController {\n    constructor() {\n        super(\"Population\");\n    }\n\n    setData() {\n        this.clear();\n        this.data.push({\n                type: \"line\",\n                markerType: \"none\",\n                color: 'black',\n                showInLegend: true, \n                name: \"pop1\",\n                legendText: \"Total Population\",\n                dataPoints: []\n            }\n        );\n        this.addAllDataPoints();\n    }\n\n    addDataPoint(i) {\n        var t = FossilRecord.tick_record[i];\n        var p = FossilRecord.pop_counts[i];\n        this.data[0].dataPoints.push({x:t, y:p});\n    }\n}\n\nmodule.exports = PopulationChart;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Stats/Charts/PopulationChart.js?");

/***/ }),

/***/ "./src/Stats/Charts/SpeciesChart.js":
/*!******************************************!*\
  !*** ./src/Stats/Charts/SpeciesChart.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const FossilRecord = __webpack_require__(/*! ../FossilRecord */ \"./src/Stats/FossilRecord.js\");\nconst ChartController = __webpack_require__(/*! ./ChartController */ \"./src/Stats/Charts/ChartController.js\");\n\nclass SpeciesChart extends ChartController {\n    constructor() {\n        super(\"Species\");\n    }\n    \n    setData() {\n        this.clear();\n        this.data.push({\n                type: \"line\",\n                markerType: \"none\",\n                color: 'black',\n                showInLegend: true, \n                name: \"spec\",\n                legendText: \"Number of Species\",\n                dataPoints: []\n            }\n        );\n        this.addAllDataPoints();\n    }\n\n    addDataPoint(i) {\n        var t = FossilRecord.tick_record[i];\n        var p = FossilRecord.species_counts[i];\n        this.data[0].dataPoints.push({x:t, y:p});\n    }\n}\n\nmodule.exports = SpeciesChart;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Stats/Charts/SpeciesChart.js?");

/***/ }),

/***/ "./src/Stats/FossilRecord.js":
/*!***********************************!*\
  !*** ./src/Stats/FossilRecord.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CellStates = __webpack_require__(/*! ../Organism/Cell/CellStates */ \"./src/Organism/Cell/CellStates.js\");\nconst Species = __webpack_require__(/*! ./Species */ \"./src/Stats/Species.js\");\n\nconst FossilRecord = {\n    init: function(){\n        this.extant_species = [];\n        this.extinct_species = [];\n\n        // if an organism has fewer than this cumulative pop, discard them on extinction\n        this.min_discard = 10;\n\n        this.record_size_limit = 500; // store this many data points\n    },\n\n    setEnv: function(env) {\n        this.env = env;\n        this.setData();\n    },\n\n    addSpecies: function(org, ancestor) {\n        // console.log(\"Adding Species\")\n        var new_species = new Species(org.anatomy, ancestor, this.env.total_ticks);\n        this.extant_species.push(new_species);\n        org.species = new_species;\n        return new_species;\n    },\n\n    addSpeciesObj: function(species) {\n        // console.log(\"Adding Species\")\n        this.extant_species.push(species);\n        return species;\n    },\n\n    fossilize: function(species) {\n        // console.log(\"Extinction\")\n        species.end_tick = this.env.total_ticks;\n        for (i in this.extant_species) {\n            var s = this.extant_species[i];\n            if (s == species) {\n                this.extant_species.splice(i, 1);\n                if (species.cumulative_pop < this.min_pop) {\n                    return false;\n                }\n                // disabled for now, causes memory problems on long runs\n                // this.extinct_species.push(s);\n                \n                // console.log(\"Extant species:\", this.extant_species.length)\n                // console.log(\"Extinct species:\", this.extinct_species.length)\n                return true;\n            }\n        }\n    },\n\n    resurrect: function(species) {\n        // console.log(\"Resurrecting species\")\n        if (species.extinct) {\n            for (i in this.extinct_species) {\n                var s = this.extinct_species[i];\n                if (s == species) {\n                    this.extinct_species.splice(i, 1);\n                    this.extant_species.push(species);\n                    species.extinct = false;\n                }\n            }\n        }\n    },\n\n    setData() {\n        // all parallel arrays\n        this.tick_record = [0];\n        this.pop_counts = [0];\n        this.species_counts = [0];\n        this.av_mut_rates = [0];\n        this.av_cells = [0];\n        this.av_cell_counts = [this.calcCellCountAverages()];\n    },\n\n    updateData() {\n        var tick = this.env.total_ticks;\n        this.tick_record.push(tick);\n        this.pop_counts.push(this.env.organisms.length);\n        this.species_counts.push(this.extant_species.length);\n        this.av_mut_rates.push(this.env.averageMutability());\n        this.calcCellCountAverages();\n        while (this.tick_record.length > this.record_size_limit) {\n            this.tick_record.shift();\n            this.pop_counts.shift();\n            this.species_counts.shift();\n            this.av_mut_rates.shift();\n            this.av_cells.shift();\n            this.av_cell_counts.shift();\n        }\n    },\n\n    calcCellCountAverages() {\n        var total_org = 0;\n        var cell_counts = {};\n        for (let c of CellStates.living) {\n            cell_counts[c.name] = 0;\n        }\n        var first=true;\n        for (let s of this.extant_species) {\n            if (s.cumulative_pop < this.min_discard && !first){\n                continue;\n            }\n            for (let name in s.cell_counts) {\n                cell_counts[name] += s.cell_counts[name] * s.population;\n            }\n            total_org += s.population;\n            first=false;\n        }\n        if (total_org == 0)\n            return cell_counts;\n\n        var total_cells = 0;\n        for (let c in cell_counts) {\n            total_cells += cell_counts[c];\n            cell_counts[c] /= total_org;\n        }\n        this.av_cells.push(total_cells / total_org);\n        this.av_cell_counts.push(cell_counts);\n    },\n\n    clear_record: function() {\n        this.extant_species = [];\n        this.extinct_species = [];\n        this.setData();\n    },\n\n}\n\nFossilRecord.init();\n\nmodule.exports = FossilRecord;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Stats/FossilRecord.js?");

/***/ }),

/***/ "./src/Stats/Species.js":
/*!******************************!*\
  !*** ./src/Stats/Species.js ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const CellStates = __webpack_require__(/*! ../Organism/Cell/CellStates */ \"./src/Organism/Cell/CellStates.js\");\n\nclass Species {\n    constructor(anatomy, ancestor, start_tick) {\n        this.anatomy = anatomy;\n        // this.ancestor = ancestor; // garbage collect ancestors to avoid memory problems\n        this.population = 1;\n        this.cumulative_pop = 1;\n        this.start_tick = start_tick;\n        this.end_tick = -1;\n        this.name = '_' + Math.random().toString(36).substr(2, 9);\n        this.extinct = false;\n        this.calcAnatomyDetails();\n    }\n\n    calcAnatomyDetails() {\n        var cell_counts = {};\n        for (let c of CellStates.living) {\n            cell_counts[c.name] = 0;\n        }\n        for (let cell of this.anatomy.cells) {\n            cell_counts[cell.state.name]+=1;\n        }\n        this.cell_counts=cell_counts;\n    }\n\n    addPop() {\n        this.population++;\n        this.cumulative_pop++;\n    }\n\n    decreasePop() {\n        this.population--;\n        if (this.population <= 0) {\n            this.extinct = true;\n            const FossilRecord = __webpack_require__(/*! ./FossilRecord */ \"./src/Stats/FossilRecord.js\");\n            FossilRecord.fossilize(this);\n        }\n    }\n\n    lifespan() {\n        return this.end_tick - this.start_tick;\n    }\n}\n\nmodule.exports = Species;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Stats/Species.js?");

/***/ }),

/***/ "./src/Stats/StatsPanel.js":
/*!*********************************!*\
  !*** ./src/Stats/StatsPanel.js ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const PopulationChart = __webpack_require__(/*! ./Charts/PopulationChart */ \"./src/Stats/Charts/PopulationChart.js\");\nconst SpeciesChart = __webpack_require__(/*! ./Charts/SpeciesChart */ \"./src/Stats/Charts/SpeciesChart.js\");\nconst MutationChart = __webpack_require__(/*! ./Charts/MutationChart */ \"./src/Stats/Charts/MutationChart.js\");\nconst CellsChart = __webpack_require__(/*! ./Charts/CellsChart */ \"./src/Stats/Charts/CellsChart.js\");\nconst FossilRecord = __webpack_require__(/*! ./FossilRecord */ \"./src/Stats/FossilRecord.js\");\n\n\nconst ChartSelections = [PopulationChart, SpeciesChart, CellsChart, MutationChart];\n\nclass StatsPanel {\n    constructor(env) {\n        this.defineControls();\n        this.chart_selection = 0;\n        this.setChart();\n        this.env = env;\n        this.last_reset_count=env.reset_count;\n    }\n\n    setChart(selection=this.chart_selection) {\n        this.chart_controller = new ChartSelections[selection]();\n        this.chart_controller.setData();\n        this.chart_controller.render();\n    }\n\n    startAutoRender() {\n        this.setChart();\n        this.render_loop = setInterval(function(){this.updateChart();}.bind(this), 1000);\n    }\n\n    stopAutoRender() {\n        clearInterval(this.render_loop);\n    }\n\n    defineControls() {\n        $('#chart-option').change ( function() {\n            this.chart_selection = $(\"#chart-option\")[0].selectedIndex;\n            this.setChart();\n        }.bind(this));\n    }\n\n    updateChart() {\n        if (this.last_reset_count < this.env.reset_count){\n            this.reset()\n        }\n        this.last_reset_count = this.env.reset_count;\n        this.chart_controller.updateData();\n        this.chart_controller.render();\n    }\n\n    updateDetails() {\n        var org_count = this.env.organisms.length;\n        $('#org-count').text(\"Total Population: \" + org_count);\n        $('#species-count').text(\"Number of Species: \" + FossilRecord.extant_species.length);\n        $('#largest-org').text(\"Largest Organism Ever: \" + this.env.largest_cell_count + \" cells\");\n        var mutation_info = \"Average Mutation Rate: \" + this.env.averageMutability().toFixed(2);\n\n        mutation_info += \" (Add: \" + this.env.avarageAddMutability().toFixed(2) ;\n        mutation_info += \", Change: \" + this.env.avarageChangeMutability().toFixed(2);\n        mutation_info += \", Remove: \" + this.env.avarageRemoveMutability().toFixed(2) + \")\";\n\n        $('#avg-mut').text(mutation_info);\n\n\n    }\n\n    reset() {\n        this.setChart();\n    }\n    \n}\n\nmodule.exports = StatsPanel;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Stats/StatsPanel.js?");

/***/ }),

/***/ "./src/Utils/Perlin.js":
/*!*****************************!*\
  !*** ./src/Utils/Perlin.js ***!
  \*****************************/
/***/ ((module) => {

eval("let perlin = {\n    rand_vect: function(){\n        let theta = Math.random() * 2 * Math.PI;\n        return {x: Math.cos(theta), y: Math.sin(theta)};\n    },\n    dot_prod_grid: function(x, y, vx, vy){\n        let g_vect;\n        let d_vect = {x: x - vx, y: y - vy};\n        if (this.gradients[[vx,vy]]){\n            g_vect = this.gradients[[vx,vy]];\n        } else {\n            g_vect = this.rand_vect();\n            this.gradients[[vx, vy]] = g_vect;\n        }\n        return d_vect.x * g_vect.x + d_vect.y * g_vect.y;\n    },\n    smootherstep: function(x){\n        return 6*x**5 - 15*x**4 + 10*x**3;\n    },\n    interp: function(x, a, b){\n        return a + this.smootherstep(x) * (b-a);\n    },\n    seed: function(){\n        this.gradients = {};\n        this.memory = {};\n    },\n    get: function(x, y) {\n        if (this.memory.hasOwnProperty([x,y]))\n            return this.memory[[x,y]];\n        let xf = Math.floor(x);\n        let yf = Math.floor(y);\n        //interpolate\n        let tl = this.dot_prod_grid(x, y, xf,   yf);\n        let tr = this.dot_prod_grid(x, y, xf+1, yf);\n        let bl = this.dot_prod_grid(x, y, xf,   yf+1);\n        let br = this.dot_prod_grid(x, y, xf+1, yf+1);\n        let xt = this.interp(x-xf, tl, tr);\n        let xb = this.interp(x-xf, bl, br);\n        let v = this.interp(y-yf, xt, xb);\n        this.memory[[x,y]] = v;\n        return v;\n    }\n}\nperlin.seed();\n\nmodule.exports = perlin;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/Utils/Perlin.js?");

/***/ }),

/***/ "./src/WorldConfig.js":
/*!****************************!*\
  !*** ./src/WorldConfig.js ***!
  \****************************/
/***/ ((module) => {

eval("const WorldConfig = {\n    headless: false,\n    skip_frames: false,\n    clear_walls_on_reset: false,\n    auto_reset: true,\n    auto_pause: false,\n}\n\nmodule.exports = WorldConfig;\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/WorldConfig.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Engine */ \"./src/Engine.js\");\n/* harmony import */ var _Engine__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Engine__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\n\n$('document').ready(function(){\n    let isMobile = mobileCheck();\n    if (isMobile) {\n        alert(\"Though the simulation still works on mobile, most features are disabled. Try it on desktop for the full experience!\");\n        $('.control-panel').css('display', 'none');\n    }\n    var engine = new (_Engine__WEBPACK_IMPORTED_MODULE_0___default())();\n    engine.start(60);\n});\n\nfunction mobileCheck() {\n    let check = false;\n    (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);\n        return check;\n};\n\n//# sourceURL=webpack://EvolutionSimulatorV2/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;
